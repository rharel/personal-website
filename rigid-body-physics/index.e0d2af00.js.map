{"mappings":"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","sources":["node_modules/@swc/helpers/src/_class_call_check.js","node_modules/@swc/helpers/src/_create_class.js","node_modules/@swc/helpers/src/_define_property.js","node_modules/@swc/helpers/src/_array_like_to_array.js","node_modules/@swc/helpers/src/_sliced_to_array.js","node_modules/@swc/helpers/src/_array_with_holes.js","node_modules/@swc/helpers/src/_iterable_to_array.js","node_modules/@swc/helpers/src/_unsupported_iterable_to_array.js","node_modules/@swc/helpers/src/_non_iterable_rest.js","projects/rigid-body-physics/rendering.ts","projects/rigid-body-physics/geometry.ts","projects/rigid-body-physics/quadtree.ts","projects/rigid-body-physics/collision.ts","projects/rigid-body-physics/simulation.ts","<<jsx-config-pragma.js>>","node_modules/@swc/helpers/src/_object_spread.js","projects/rigid-body-physics/demo.ts","node_modules/@swc/helpers/src/_type_of.js"],"sourcesContent":["export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\n","import arrayWithHoles from './_array_with_holes';\nimport iterableToArrayLimit from './_iterable_to_array';\nimport nonIterableRest from './_non_iterable_rest';\nimport unsupportedIterableToArray from './_unsupported_iterable_to_array';\n\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}\n","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n","import _arrayLikeToArray from './_array_like_to_array';\n\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(n);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))\n    return _arrayLikeToArray(o, minLen);\n}\n","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n","import { World } from \"./simulation\";\r\n\r\nexport type EntityStyles = {\r\n  [key: number]: { fill: string };\r\n};\r\n\r\nexport type AnimationControls = {\r\n  pause(): void;\r\n  resume(): void;\r\n};\r\n\r\nfunction render_world_frame(\r\n  world: World,\r\n  context: CanvasRenderingContext2D,\r\n  clear_color: string,\r\n  entity_styles: EntityStyles\r\n) {\r\n  context.save();\r\n\r\n  // Clear canvas.\r\n  context.fillStyle = clear_color;\r\n  context.fillRect(0, 0, context.canvas.width, context.canvas.height);\r\n\r\n  // Flip vertical axis.\r\n  context.translate(0, context.canvas.height);\r\n  context.scale(1, -1);\r\n\r\n  // Scale to world size.\r\n  context.scale(\r\n    context.canvas.width / world.options.size,\r\n    context.canvas.height / world.options.size\r\n  );\r\n\r\n  // Draw entities.\r\n  for (const entity_id in entity_styles) {\r\n    const { fill } = entity_styles[entity_id];\r\n    const entity = world.entity(parseInt(entity_id));\r\n    context.beginPath();\r\n    context.arc(\r\n      entity.position.x,\r\n      entity.position.y,\r\n      entity.radius,\r\n      0,\r\n      2 * Math.PI\r\n    );\r\n    context.fillStyle = fill;\r\n    context.fill();\r\n  }\r\n\r\n  context.restore();\r\n}\r\n\r\nexport function render_world_animation(\r\n  world: World,\r\n  context: CanvasRenderingContext2D,\r\n  clear_color: string,\r\n  entity_styles: EntityStyles,\r\n  frame_callback?: () => void\r\n): AnimationControls {\r\n  // Frame request loop.\r\n  let frame_request: number | null = null;\r\n  let last_frame_time: number | null = null;\r\n  function on_animation_frame() {\r\n    const now = performance.now();\r\n    const real_dt =\r\n      last_frame_time !== null ? (now - last_frame_time) / 1000 : 1 / 60;\r\n    last_frame_time = now;\r\n    world.step(real_dt);\r\n    render_world_frame(\r\n      world,\r\n      context as CanvasRenderingContext2D,\r\n      clear_color,\r\n      entity_styles\r\n    );\r\n    if (frame_callback) {\r\n      frame_callback();\r\n    }\r\n    if (frame_request !== null) {\r\n      frame_request = requestAnimationFrame(on_animation_frame);\r\n    }\r\n  }\r\n\r\n  // Start animation.\r\n  frame_request = requestAnimationFrame(on_animation_frame);\r\n\r\n  return {\r\n    pause() {\r\n      if (frame_request !== null) {\r\n        cancelAnimationFrame(frame_request);\r\n        frame_request = null;\r\n        last_frame_time = null;\r\n      }\r\n    },\r\n    resume() {\r\n      if (frame_request === null) {\r\n        last_frame_time = performance.now();\r\n        frame_request = requestAnimationFrame(on_animation_frame);\r\n      }\r\n    },\r\n  };\r\n}\r\n","export class Vec2 {\r\n  constructor(public x: number, public y: number) {}\r\n\r\n  clone(): Vec2 {\r\n    return new Vec2(this.x, this.y);\r\n  }\r\n\r\n  assign(other: Vec2): Vec2 {\r\n    this.x = other.x;\r\n    this.y = other.y;\r\n    return this;\r\n  }\r\n\r\n  normalize(): Vec2 {\r\n    const factor = 1 / this.length();\r\n    this.x *= factor;\r\n    this.y *= factor;\r\n    return this;\r\n  }\r\n\r\n  set_length(scalar: number): Vec2 {\r\n    const factor = scalar / this.length();\r\n    this.x *= factor;\r\n    this.y *= factor;\r\n    return this;\r\n  }\r\n\r\n  add(other: Vec2): Vec2 {\r\n    this.x += other.x;\r\n    this.y += other.y;\r\n    return this;\r\n  }\r\n\r\n  subtract(other: Vec2): Vec2 {\r\n    this.x -= other.x;\r\n    this.y -= other.y;\r\n    return this;\r\n  }\r\n\r\n  scale(scalar: number): Vec2 {\r\n    this.x *= scalar;\r\n    this.y *= scalar;\r\n    return this;\r\n  }\r\n\r\n  dot(other: Vec2): number {\r\n    return this.x * other.x + this.y * other.y;\r\n  }\r\n\r\n  length_squared(): number {\r\n    return this.x * this.x + this.y * this.y;\r\n  }\r\n\r\n  length(): number {\r\n    return Math.sqrt(this.x * this.x + this.y * this.y);\r\n  }\r\n\r\n  distance_squared_to(other: Vec2): number {\r\n    const dx = other.x - this.x;\r\n    const dy = other.y - this.y;\r\n    return dx * dx + dy * dy;\r\n  }\r\n}\r\n\r\nexport function discs_intersect(\r\n  center_1: Vec2,\r\n  radius_1: number,\r\n  center_2: Vec2,\r\n  radius_2: number\r\n): boolean {\r\n  return (\r\n    center_1.distance_squared_to(center_2) <=\r\n    (radius_1 + radius_2) * (radius_1 + radius_2)\r\n  );\r\n}\r\n","export class BoundingBox {\r\n  readonly bottom: number;\r\n  readonly right: number;\r\n\r\n  constructor(\r\n    readonly top: number,\r\n    readonly left: number,\r\n    readonly width: number,\r\n    readonly height: number\r\n  ) {\r\n    this.bottom = this.top - this.height;\r\n    this.right = this.left + this.width;\r\n  }\r\n\r\n  static from_center_and_radius(\r\n    center_x: number,\r\n    center_y: number,\r\n    radius: number\r\n  ): BoundingBox {\r\n    return new BoundingBox(\r\n      center_y + radius,\r\n      center_x - radius,\r\n      radius,\r\n      radius\r\n    );\r\n  }\r\n\r\n  overlaps(other: BoundingBox): boolean {\r\n    return (\r\n      other.left <= this.right &&\r\n      other.right >= this.left &&\r\n      other.bottom <= this.top &&\r\n      other.top >= this.bottom\r\n    );\r\n  }\r\n}\r\n\r\nexport class QuadTree<T> {\r\n  constructor(readonly depth: number, readonly bounds: BoundingBox) {\r\n    if (this.depth < 1) {\r\n      throw new Error(\"quadtree node cannot have depth < 1\");\r\n    } else if (this.depth === 1) {\r\n      this.node = { kind: \"leaf\", items: [] };\r\n    } else if (this.depth > 1) {\r\n      const child_depth = depth - 1;\r\n      const y = this.bounds.top;\r\n      const x = this.bounds.left;\r\n      const w2 = 0.5 * this.bounds.width;\r\n      const h2 = 0.5 * this.bounds.height;\r\n      this.node = {\r\n        kind: \"internal\",\r\n        sw: new QuadTree(child_depth, new BoundingBox(y - h2, x, w2, h2)),\r\n        se: new QuadTree(child_depth, new BoundingBox(y - h2, x + w2, w2, h2)),\r\n        nw: new QuadTree(child_depth, new BoundingBox(y, x, w2, h2)),\r\n        ne: new QuadTree(child_depth, new BoundingBox(y, x + w2, w2, h2)),\r\n      };\r\n    }\r\n  }\r\n\r\n  nr_items(): number {\r\n    if (this.node.kind === \"leaf\") {\r\n      return this.node.items.length;\r\n    } else {\r\n      let sum = 0;\r\n      this.for_each_child((child) => (sum += child.nr_items()));\r\n      return sum;\r\n    }\r\n  }\r\n\r\n  clear() {\r\n    if (this.node.kind === \"leaf\") {\r\n      this.node.items.length = 0;\r\n    } else {\r\n      this.for_each_child((child) => child.clear());\r\n    }\r\n  }\r\n\r\n  add(entity: T, target_bounds: BoundingBox): void {\r\n    if (!target_bounds.overlaps(this.bounds)) {\r\n      return;\r\n    } else if (this.node.kind === \"internal\") {\r\n      this.for_each_child((child) => {\r\n        if (child.bounds.overlaps(target_bounds)) {\r\n          child.add(entity, target_bounds);\r\n        }\r\n      });\r\n    } else if (!this.node.items.includes(entity)) {\r\n      this.node.items.push(entity);\r\n    }\r\n  }\r\n\r\n  remove(entity: T, target_bounds: BoundingBox): void {\r\n    if (!target_bounds.overlaps(this.bounds)) {\r\n      return;\r\n    } else if (this.node.kind === \"internal\") {\r\n      this.for_each_child((child) => {\r\n        if (child.bounds.overlaps(target_bounds)) {\r\n          child.remove(entity, target_bounds);\r\n        }\r\n      });\r\n    } else if (this.node.items.includes(entity)) {\r\n      const index = this.node.items.indexOf(entity);\r\n      this.node.items.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  for_each_child(callback: (node: QuadTree<T>) => void) {\r\n    if (this.node.kind === \"leaf\") {\r\n      return;\r\n    }\r\n    callback(this.node.sw);\r\n    callback(this.node.se);\r\n    callback(this.node.nw);\r\n    callback(this.node.ne);\r\n  }\r\n\r\n  for_each_leaf_with_at_least(\r\n    threshold: number,\r\n    callback: (items: T[]) => void\r\n  ) {\r\n    if (this.nr_items() < threshold) {\r\n      return;\r\n    } else if (this.node.kind === \"leaf\") {\r\n      callback(this.node.items);\r\n    } else {\r\n      this.for_each_child((child) =>\r\n        child.for_each_leaf_with_at_least(threshold, callback)\r\n      );\r\n    }\r\n  }\r\n\r\n  private readonly node:\r\n    | { kind: \"leaf\"; items: T[] }\r\n    | {\r\n        kind: \"internal\";\r\n        sw: QuadTree<T>;\r\n        se: QuadTree<T>;\r\n        nw: QuadTree<T>;\r\n        ne: QuadTree<T>;\r\n      } = { kind: \"leaf\", items: [] };\r\n}\r\n","import { discs_intersect, Vec2 } from \"./geometry\";\r\nimport { Entity } from \"./simulation\";\r\nimport { BoundingBox, QuadTree } from \"./quadtree\";\r\n\r\nexport type CullingOptions = {\r\n  bounds_size: number;\r\n  subdivisions: number;\r\n};\r\n\r\nexport default class CollisionCuller {\r\n  constructor(readonly options: CullingOptions) {\r\n    this.quadtree = new QuadTree(\r\n      options.subdivisions,\r\n      new BoundingBox(\r\n        options.bounds_size,\r\n        0,\r\n        options.bounds_size,\r\n        options.bounds_size\r\n      )\r\n    );\r\n  }\r\n\r\n  clear() {\r\n    this.quadtree.clear();\r\n  }\r\n\r\n  add(entity: Entity) {\r\n    this.quadtree.add(\r\n      entity,\r\n      BoundingBox.from_center_and_radius(\r\n        entity.position.x,\r\n        entity.position.y,\r\n        entity.radius\r\n      )\r\n    );\r\n  }\r\n\r\n  remove(entity: Entity) {\r\n    this.quadtree.remove(\r\n      entity,\r\n      BoundingBox.from_center_and_radius(\r\n        entity.position.x,\r\n        entity.position.y,\r\n        entity.radius\r\n      )\r\n    );\r\n  }\r\n\r\n  moved(entity: Entity, old_position: Vec2) {\r\n    const old_bounds = BoundingBox.from_center_and_radius(\r\n      old_position.x,\r\n      old_position.y,\r\n      entity.radius\r\n    );\r\n    const new_bounds = BoundingBox.from_center_and_radius(\r\n      entity.position.x,\r\n      entity.position.y,\r\n      entity.radius\r\n    );\r\n    this.quadtree.remove(entity, old_bounds);\r\n    this.quadtree.add(entity, new_bounds);\r\n  }\r\n\r\n  for_each_potential_collision_group(callback: (group: Array<Entity>) => void) {\r\n    this.quadtree.for_each_leaf_with_at_least(2, (items) => {\r\n      callback(items);\r\n    });\r\n  }\r\n\r\n  private readonly quadtree: QuadTree<Entity>;\r\n}\r\n\r\n// Finds roots of a quadratic.\r\nfunction quadratic_solution(\r\n  a: number,\r\n  b: number,\r\n  c: number\r\n):\r\n  | { count: 2; x1: number; x2: number }\r\n  | { count: 1; x1: number }\r\n  | { count: 0 } {\r\n  const b2_4ac = b * b - 4 * a * c;\r\n  if (b2_4ac < 0) {\r\n    return { count: 0 };\r\n  } else if (b2_4ac > 0) {\r\n    return {\r\n      count: 2,\r\n      x1: (-b + Math.sqrt(b2_4ac)) / (2 * a),\r\n      x2: (-b - Math.sqrt(b2_4ac)) / (2 * a),\r\n    };\r\n  } else {\r\n    return { count: 1, x1: -b / (2 * a) };\r\n  }\r\n}\r\n\r\n// Tests whether two discs with the specified velocities collide in the near future.\r\n//\r\n// c1, v1, r1:\r\n//      The first disc's center, velocity, and radius.\r\n// c2, v2, r2:\r\n//      The second disc's center, velocity, and radius.\r\n//\r\n// Returns the time of collision or -1 if there is none.\r\nfunction collision_time(\r\n  c1: Vec2,\r\n  v1: Vec2,\r\n  r1: number,\r\n  c2: Vec2,\r\n  v2: Vec2,\r\n  r2: number\r\n): number {\r\n  // The squared distance between the two centers at time t is:\r\n  //\r\n  // (1)  D(t) = |(c1 + v1 * t) - (c2 + v2 * t)| ^ 2\r\n  //\r\n  // We are interested in finding whether D(t) <= (r1 + r2) ^ 2 on the interval [0, dt].\r\n  // This is equivalent to solving the following equation:\r\n  //\r\n  // (2)   ((c1.x + v1.x * t) - (c2.x + v2.x * t)) ^ 2 +\r\n  //       ((c1.y + v1.y * t) - (c2.y + v2.y * t)) ^ 2 -\r\n  //       (r1 + r2) ^ 2 <= 0\r\n  //\r\n  // Rewrite:\r\n  //\r\n  //      (c1.x - c2.x + (v1.x - v2.x) * t) ^ 2 +\r\n  //      (c1.y - c2.y + (v1.y - v2.y) * t) ^ 2 -\r\n  //      (r1 + r2) ^ 2 <= 0\r\n  //\r\n  // Denote the components of c1 - c2 = [dc_x, dc_y], those of v1 - v2 [dv_x, dv_y], and call\r\n  // r1 + r2 = R:\r\n  //\r\n  //      (dc_x + dv_x * t) ^ 2 +\r\n  //      (dc_y + dv_y * t) ^ 2 -\r\n  //      R ^ 2 <= 0\r\n  //\r\n  // Rewrite:\r\n  //\r\n  //      dc_x^2 + 2*dc_x*dv_x*t + (dv_x^2)*(t^2) +\r\n  //      dc_y^2 + 2*dc_y*dv_y*t + (dv_y^2)*(t^2) -\r\n  //      R ^ 2 <= 0\r\n  //\r\n  // Which can be expressed as:\r\n  //\r\n  //      a*(t^2) + b*t + c <= 0\r\n  //\r\n  // Where:\r\n  //\r\n  //      a = dv_x^2 + dv_y^2\r\n  //      b = 2 * (dc_x*dv_x + dc_y*dv_y)\r\n  //      c = dc_x^2 + dc_y^2 - R^2\r\n  //\r\n  // Solving this yields at most two solutions. All we have to do next is take the minimum\r\n  // of the two that is also contained within the interval [0, dt].\r\n\r\n  const dv_x = v1.x - v2.x;\r\n  const dv_y = v1.y - v2.y;\r\n\r\n  const dv_x2 = dv_x * dv_x;\r\n  const dv_y2 = dv_y * dv_y;\r\n\r\n  const dc_x = c1.x - c2.x;\r\n  const dc_y = c1.y - c2.y;\r\n\r\n  const dc_x2 = dc_x * dc_x;\r\n  const dc_y2 = dc_y * dc_y;\r\n\r\n  const solution = quadratic_solution(\r\n    dv_x2 + dv_y2,\r\n    2 * (dc_x * dv_x + dc_y * dv_y),\r\n    dc_x2 + dc_y2 - (r1 + r2) * (r1 + r2)\r\n  );\r\n\r\n  if (solution.count === 2) {\r\n    const [t1, t2] =\r\n      solution.x1 <= solution.x2\r\n        ? [solution.x1, solution.x2]\r\n        : [solution.x2, solution.x1];\r\n    if (t1 < 0 && t2 >= 0) {\r\n      return 0;\r\n    }\r\n    return t1;\r\n  } else if (solution.count === 1) {\r\n    return solution.x1;\r\n  } else {\r\n    return -1;\r\n  }\r\n}\r\n\r\nexport type Collision = {\r\n  entities: [Entity, Entity];\r\n  time: number;\r\n};\r\n\r\n// Finds near-future colliding pairs.\r\nexport function future_collisions(\r\n  entities: Entity[],\r\n  time_horizon: number\r\n): Collision[] {\r\n  let collisions: Collision[] = [];\r\n  for (let j = 0; j < entities.length; ++j) {\r\n    const a = entities[j];\r\n    for (let k = j + 1; k < entities.length; ++k) {\r\n      const b = entities[k];\r\n\r\n      if (a.static && b.static) {\r\n        continue;\r\n      }\r\n\r\n      const t = collision_time(\r\n        a.position,\r\n        a.velocity,\r\n        a.radius,\r\n        b.position,\r\n        b.velocity,\r\n        b.radius\r\n      );\r\n\r\n      if (0 <= t && t <= time_horizon) {\r\n        collisions.push({\r\n          entities: [a, b],\r\n          time: t,\r\n        });\r\n      }\r\n    }\r\n  }\r\n  return collisions;\r\n}\r\n\r\n// Finds colliding pairs.\r\nexport function present_collisions(entities: Entity[]): [Entity, Entity][] {\r\n  const collisions: [Entity, Entity][] = [];\r\n  for (let j = 0; j < entities.length; ++j) {\r\n    const a = entities[j];\r\n    for (let k = j + 1; k < entities.length; ++k) {\r\n      const b = entities[k];\r\n\r\n      if (a.static && b.static) {\r\n        continue;\r\n      }\r\n\r\n      if (discs_intersect(a.position, a.radius, b.position, b.radius)) {\r\n        collisions.push([a, b]);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  return collisions;\r\n}\r\n\r\n// Applies collision response.\r\nexport function collide_entities(a: Entity, b: Entity) {\r\n  if (a.static && b.static) {\r\n    return;\r\n  }\r\n\r\n  // Ensure static entity is always assigned to a:\r\n  if (b.static) {\r\n    const c = a;\r\n    a = b;\r\n    b = c;\r\n  }\r\n\r\n  const dx = a.position\r\n    .clone()\r\n    .subtract(b.position)\r\n    .set_length(a.radius + b.radius);\r\n  const du = a.velocity.clone().subtract(b.velocity);\r\n\r\n  const coefficient_of_restitution = 0.5 * (a.elasticity + b.elasticity);\r\n  const response =\r\n    (coefficient_of_restitution * 2 * du.dot(dx)) /\r\n    ((a.mass + b.mass) * dx.length_squared());\r\n\r\n  if (!a.static) {\r\n    a.velocity.subtract(dx.clone().scale(response * b.mass));\r\n  }\r\n  if (!b.static) {\r\n    b.velocity.subtract(dx.clone().scale(-response * a.mass));\r\n  }\r\n}\r\n\r\n// Moves entities a minimum distance away from each other.\r\nexport function separate_entities(a: Entity, b: Entity, distance: number) {\r\n  if (a.static && b.static) {\r\n    return;\r\n  }\r\n\r\n  const r = a.radius + b.radius + distance;\r\n  const d2 = a.position.distance_squared_to(b.position);\r\n\r\n  if (d2 >= r * r) {\r\n    return;\r\n  }\r\n\r\n  const collision_axis = a.position.clone().subtract(b.position).normalize();\r\n  const offset_magnitude = r - Math.sqrt(d2);\r\n\r\n  if (a.static) {\r\n    b.position.add(collision_axis.scale(-offset_magnitude));\r\n  } else if (b.static) {\r\n    a.position.add(collision_axis.scale(offset_magnitude));\r\n  } else {\r\n    a.position.add(collision_axis.clone().scale(0.5 * offset_magnitude));\r\n    b.position.add(collision_axis.clone().scale(0.5 * -offset_magnitude));\r\n  }\r\n}\r\n","import { Vec2 } from \"./geometry\";\r\nimport CollisionCuller, {\r\n  future_collisions,\r\n  present_collisions,\r\n  separate_entities,\r\n  collide_entities,\r\n  Collision,\r\n} from \"./collision\";\r\n\r\n// Mass of static entities. Should be extremely large.\r\nconst STATIC_ENTITY_MASS = Math.pow(10, 14);\r\n\r\n// Minimum simulation time increment.\r\nconst MIN_TIME_STEP_SIZE = 0.001;\r\n\r\n// Minimum distance between entities after collision separation.\r\nconst MIN_SEPARATION_DISTANCE = 0.001;\r\n\r\n// Objects whose squared velocity is less than this are considered to be at rest.\r\nconst REST_VELOCITY_THRESHOLD = 0.001;\r\n\r\nexport type Entity = {\r\n  mass: number;\r\n  radius: number;\r\n  elasticity: number;\r\n  static: boolean;\r\n  position: Vec2;\r\n  velocity: Vec2;\r\n  applied_force: Vec2;\r\n};\r\n\r\nexport type EntityView = {\r\n  mass: number;\r\n  radius: number;\r\n  elasticity: number;\r\n  static: boolean;\r\n  position: { x: number; y: number };\r\n  velocity: { x: number; y: number };\r\n  applied_force: { x: number; y: number };\r\n};\r\n\r\nexport type EntityOptions = {\r\n  [key in keyof EntityView]?: EntityView[key];\r\n};\r\n\r\nfunction step_entity(entity: Entity, dt: number) {\r\n  const f = entity.applied_force;\r\n  const m_inv = 1 / entity.mass;\r\n  const p = entity.position;\r\n  const v = entity.velocity;\r\n\r\n  const a = 0.5 * dt * m_inv;\r\n  p.x += dt * (v.x + a * f.x);\r\n  p.y += dt * (v.y + a * f.y);\r\n\r\n  const b = dt * m_inv;\r\n  v.x += b * f.x;\r\n  v.y += b * f.y;\r\n}\r\n\r\nexport type WorldOptions = {\r\n  size: number;\r\n  collision_culling_subdivisions: number;\r\n  high_precision: boolean;\r\n};\r\n\r\nexport class World {\r\n  constructor(readonly options: WorldOptions) {\r\n    this.collision_culler = new CollisionCuller({\r\n      subdivisions: options.collision_culling_subdivisions,\r\n      bounds_size: options.size,\r\n    });\r\n  }\r\n\r\n  clear() {\r\n    this.collision_culler.clear();\r\n    this.entities.clear();\r\n  }\r\n\r\n  spawn(options: EntityOptions): number {\r\n    const entity = {\r\n      mass: options.static\r\n        ? STATIC_ENTITY_MASS\r\n        : options.mass !== undefined\r\n        ? options.mass\r\n        : 1,\r\n      radius: options.radius !== undefined ? options.radius : 1,\r\n      elasticity: options.elasticity !== undefined ? options.elasticity : 0,\r\n      static: options.static !== undefined ? options.static : false,\r\n      position:\r\n        options.position !== undefined\r\n          ? new Vec2(options.position.x, options.position.y)\r\n          : new Vec2(0, 0),\r\n      velocity:\r\n        options.velocity !== undefined\r\n          ? new Vec2(options.velocity.x, options.velocity.y)\r\n          : new Vec2(0, 0),\r\n      applied_force:\r\n        options.applied_force !== undefined\r\n          ? new Vec2(options.applied_force.x, options.applied_force.y)\r\n          : new Vec2(0, 0),\r\n    };\r\n\r\n    const id = this.next_entity_id;\r\n    this.next_entity_id += 1;\r\n\r\n    this.entities.set(id, entity);\r\n    this.collision_culler.add(entity);\r\n\r\n    return id;\r\n  }\r\n\r\n  remove(entity_id: number) {\r\n    if (!this.entities.has(entity_id)) {\r\n      throw new Error(\"bad entity id\");\r\n    }\r\n    const entity = this.entities.get(entity_id) as Entity;\r\n    this.collision_culler.remove(entity);\r\n    this.entities.delete(entity_id);\r\n  }\r\n\r\n  entity(entity_id: number): EntityView {\r\n    if (!this.entities.has(entity_id)) {\r\n      throw new Error(\"bad entity id\");\r\n    }\r\n    const entity = this.entities.get(entity_id) as Entity;\r\n    return {\r\n      ...entity,\r\n      position: { x: entity.position.x, y: entity.position.y },\r\n      velocity: { x: entity.velocity.x, y: entity.velocity.y },\r\n      applied_force: { x: entity.applied_force.x, y: entity.applied_force.y },\r\n    };\r\n  }\r\n\r\n  update(entity_id: number, options: EntityOptions) {\r\n    if (!this.entities.has(entity_id)) {\r\n      throw new Error(\"bad entity id\");\r\n    }\r\n\r\n    const entity = this.entities.get(entity_id) as Entity;\r\n    const old_position = entity.position.clone();\r\n\r\n    if (options.mass !== undefined) {\r\n      entity.mass = options.mass;\r\n    }\r\n    if (options.radius !== undefined) {\r\n      entity.radius = options.radius;\r\n    }\r\n    if (options.elasticity !== undefined) {\r\n      entity.elasticity = options.elasticity;\r\n    }\r\n    if (options.static !== undefined) {\r\n      entity.static = options.static;\r\n      if (entity.static) {\r\n        entity.mass = STATIC_ENTITY_MASS;\r\n      }\r\n    }\r\n    if (options.position !== undefined) {\r\n      entity.position.x = options.position.x;\r\n      entity.position.y = options.position.y;\r\n    }\r\n    if (options.velocity !== undefined) {\r\n      entity.velocity.x = options.velocity.x;\r\n      entity.velocity.y = options.velocity.y;\r\n    }\r\n    if (options.applied_force !== undefined) {\r\n      entity.applied_force.x = options.applied_force.x;\r\n      entity.applied_force.y = options.applied_force.y;\r\n    }\r\n\r\n    if (options.position !== undefined || options.radius !== undefined) {\r\n      this.collision_culler.moved(entity, old_position);\r\n    }\r\n  }\r\n\r\n  for_each_entity(callback: (id: number, entity: EntityView) => void) {\r\n    this.entities.forEach((_entity, entity_id) => {\r\n      callback(entity_id, this.entity(entity_id));\r\n    });\r\n  }\r\n\r\n  step(dt: number) {\r\n    if (dt <= 0) {\r\n      throw new Error(\"cannot step with dt <= 0\");\r\n    }\r\n\r\n    this.separate_colliding_entities();\r\n\r\n    if (this.options.high_precision) {\r\n      this.step_with_high_precision(dt);\r\n    } else {\r\n      this.step_with_low_precision(dt);\r\n    }\r\n\r\n    this.entities.forEach((entity) => {\r\n      if (entity.velocity.length_squared() < REST_VELOCITY_THRESHOLD) {\r\n        entity.velocity.x = 0;\r\n        entity.velocity.y = 0;\r\n      }\r\n    });\r\n  }\r\n\r\n  private separate_colliding_entities() {\r\n    const old_entity_positions = new Map<Entity, Vec2>();\r\n\r\n    this.collision_culler.for_each_potential_collision_group((group) => {\r\n      // Repeatedly find intersecting pairs, separate them, and check for new intersections.\r\n      let intersecting_pairs = present_collisions(group);\r\n      while (intersecting_pairs.length > 0) {\r\n        for (const [entity_1, entity_2] of intersecting_pairs) {\r\n          if (!entity_1.static) {\r\n            old_entity_positions.set(entity_1, entity_1.position.clone());\r\n          }\r\n          if (!entity_2.static) {\r\n            old_entity_positions.set(entity_2, entity_2.position.clone());\r\n          }\r\n          separate_entities(entity_1, entity_2, MIN_SEPARATION_DISTANCE);\r\n          collide_entities(entity_1, entity_2);\r\n        }\r\n        intersecting_pairs = present_collisions(group);\r\n      }\r\n    });\r\n\r\n    old_entity_positions.forEach((old_position, entity) => {\r\n      this.collision_culler.moved(entity, old_position);\r\n    });\r\n  }\r\n\r\n  private step_with_high_precision(dt: number) {\r\n    const stepped_entities = new Set<Entity>();\r\n    const old_entity_positions = new Map<Entity, Vec2>();\r\n\r\n    // Save entity starting positions.\r\n    this.entities.forEach((entity) => {\r\n      old_entity_positions.set(entity, entity.position.clone());\r\n    });\r\n\r\n    // Handle groups of potentially colliding entities.\r\n    this.collision_culler.for_each_potential_collision_group((group) => {\r\n      for (let i = 0; i < group.length; ++i) {\r\n        stepped_entities.add(group[i]);\r\n      }\r\n      this.step_entity_group(group, dt);\r\n    });\r\n\r\n    // Some entities were already stepped forward in time during collision handling,\r\n    // now we step the rest.\r\n    this.entities.forEach((entity) => {\r\n      if (!stepped_entities.has(entity)) {\r\n        step_entity(entity, dt);\r\n      }\r\n    });\r\n\r\n    old_entity_positions.forEach((previous_position, entity) => {\r\n      this.collision_culler.moved(entity, previous_position);\r\n    });\r\n  }\r\n\r\n  private step_entity_group(group: Entity[], dt: number) {\r\n    // Step forward in the time interval [now, now + dt] in small increments, ensuring that\r\n    // collisions are resolved at their precise moment of occurrence.\r\n    let t = dt;\r\n    while (t > MIN_TIME_STEP_SIZE) {\r\n      // Find the time of earliest collision.\r\n      let earliest_collision: Collision | null = null;\r\n      for (const collision of future_collisions(group, t)) {\r\n        if (\r\n          earliest_collision === null ||\r\n          collision.time < earliest_collision.time\r\n        ) {\r\n          earliest_collision = collision;\r\n        }\r\n      }\r\n\r\n      const time_step =\r\n        earliest_collision !== null ? earliest_collision.time : dt;\r\n\r\n      // Step entire group up to the time of earliest collision.\r\n      for (const entity of group) {\r\n        step_entity(entity, time_step);\r\n      }\r\n\r\n      // Handle the earliest collision.\r\n      if (earliest_collision !== null) {\r\n        collide_entities(\r\n          earliest_collision.entities[0],\r\n          earliest_collision.entities[1]\r\n        );\r\n        separate_entities(\r\n          earliest_collision.entities[0],\r\n          earliest_collision.entities[1],\r\n          MIN_SEPARATION_DISTANCE\r\n        );\r\n      }\r\n\r\n      // Update remaining time to move forward in time.\r\n      t -= time_step;\r\n    }\r\n  }\r\n\r\n  private step_with_low_precision(dt: number) {\r\n    this.entities.forEach((entity) => {\r\n      if (!entity.static) {\r\n        const old_position = entity.position.clone();\r\n        step_entity(entity, dt);\r\n        this.collision_culler.moved(entity, old_position);\r\n      }\r\n    });\r\n  }\r\n\r\n  private next_entity_id = 0;\r\n  private readonly collision_culler: CollisionCuller;\r\n  private readonly entities = new Map<number, Entity>();\r\n}\r\n",null,"import defineProperty from './_define_property';\n\nexport default function _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}","import { EntityStyles, render_world_animation } from \"./rendering\";\r\nimport { World } from \"./simulation\";\r\nimport { Vec2 } from \"./geometry\";\r\n\r\nconst WORLD_SIZE = 1;\r\nconst NR_PARTICLES = 50;\r\nconst PARTICLE_ENTITY_RADIUS_MIN = (0.02 * WORLD_SIZE * 30) / NR_PARTICLES;\r\nconst PARTICLE_ENTITY_RADIUS_MAX = (0.05 * WORLD_SIZE * 30) / NR_PARTICLES;\r\nconst PARTICLE_VELOCITY_MIN = 0.1 * WORLD_SIZE;\r\nconst PARTICLE_VELOCITY_MAX = 0.5 * WORLD_SIZE;\r\nconst PARTICLE_ELASTICITY = 0.95;\r\nconst PALETTE = [\r\n  \"red\",\r\n  \"blue\",\r\n  \"brown\",\r\n  \"green\",\r\n  \"orange\",\r\n  \"magenta\",\r\n  \"purple\",\r\n];\r\n\r\nfunction random_in_range(lower: number, upper: number): number {\r\n  return lower + Math.random() * (upper - lower);\r\n}\r\n\r\nfunction setup() {\r\n  const entity_styles: EntityStyles = {};\r\n\r\n  const world = new World({\r\n    size: WORLD_SIZE,\r\n    collision_culling_subdivisions: 3,\r\n    high_precision: true,\r\n  });\r\n\r\n  for (let i = 0; i < NR_PARTICLES; ++i) {\r\n    const radius = random_in_range(\r\n      PARTICLE_ENTITY_RADIUS_MIN,\r\n      PARTICLE_ENTITY_RADIUS_MAX\r\n    );\r\n    const mass = Math.PI * radius * radius;\r\n    const particle_id = world.spawn({\r\n      mass,\r\n      radius,\r\n      elasticity: PARTICLE_ELASTICITY,\r\n      position: {\r\n        x: random_in_range(radius, world.options.size - radius),\r\n        y: random_in_range(radius, world.options.size - radius),\r\n      },\r\n      velocity: new Vec2(\r\n        random_in_range(-1, 1),\r\n        random_in_range(-1, 1)\r\n      ).set_length(\r\n        random_in_range(PARTICLE_VELOCITY_MIN, PARTICLE_VELOCITY_MAX)\r\n      ),\r\n    });\r\n    entity_styles[particle_id] = { fill: PALETTE[i % PALETTE.length] };\r\n  }\r\n\r\n  const canvas_elements = document.getElementsByClassName(\"demo-canvas\");\r\n  if (canvas_elements.length !== 1) {\r\n    throw new Error(`expected 1 demo canvas, found ${canvas_elements.length}`);\r\n  }\r\n\r\n  const canvas = canvas_elements.item(0);\r\n  if (!(canvas instanceof HTMLCanvasElement)) {\r\n    throw new Error(`expected canvas element, found ${typeof canvas}`);\r\n  }\r\n\r\n  const context = canvas.getContext(\"2d\", { alpha: false });\r\n  if (context === null) {\r\n    throw new Error(\"cannot get rendering context\");\r\n  }\r\n\r\n  const controls = render_world_animation(\r\n    world,\r\n    context,\r\n    \"white\",\r\n    entity_styles,\r\n    () => {\r\n      let total_velocity = 0;\r\n      world.for_each_entity((entity_id, entity) => {\r\n        let update_required = false;\r\n        if (entity.position.x < entity.radius) {\r\n          entity.position.x = entity.radius;\r\n          entity.velocity.x *= -1;\r\n          update_required = true;\r\n        }\r\n        if (entity.position.x > world.options.size - entity.radius) {\r\n          entity.position.x = world.options.size - entity.radius;\r\n          entity.velocity.x *= -1;\r\n          update_required = true;\r\n        }\r\n        if (entity.position.y < entity.radius) {\r\n          entity.position.y = entity.radius;\r\n          entity.velocity.y *= -1;\r\n          update_required = true;\r\n        }\r\n        if (entity.position.y > world.options.size - entity.radius) {\r\n          entity.position.y = world.options.size - entity.radius;\r\n          entity.velocity.y *= -1;\r\n          update_required = true;\r\n        }\r\n        if (update_required) {\r\n          world.update(entity_id, {\r\n            position: entity.position,\r\n            velocity: entity.velocity,\r\n          });\r\n        }\r\n        total_velocity += entity.velocity.x + entity.velocity.y;\r\n      });\r\n      if (total_velocity === 0) {\r\n        controls.pause();\r\n      }\r\n    }\r\n  );\r\n}\r\n\r\nwindow.addEventListener(\"DOMContentLoaded\", setup);\r\n","export default function _typeof(obj) {\n    \"@swc/helpers - typeof\";\n    return obj && obj.constructor === Symbol ? \"symbol\" : typeof obj;\n};\n"],"names":["$b07b5082a7b10ea2$export$2e2bcd8739ae039","instance","Constructor","TypeError","$e5f9bd0c37e9914c$var$_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","$e5f9bd0c37e9914c$export$2e2bcd8739ae039","protoProps","staticProps","prototype","$7dbcf7086e8d10dc$export$2e2bcd8739ae039","obj","value","$a735c72dc00321c4$export$2e2bcd8739ae039","arr","len","arr2","Array","$d8de0eb6e0dd5f0d$export$2e2bcd8739ae039","isArray","$6e00726c30bb8aa8$export$2e2bcd8739ae039","iter","Symbol","iterator","from","$8664303016091545$export$2e2bcd8739ae039","o","minLen","n","toString","call","slice","constructor","name","test","$09f7b49357d6407d$export$2e2bcd8739ae039","$9e1e3aff84b72d71$export$2e2bcd8739ae039","$db57845a13a88892$export$f4adcd6d36513d43","world","context","clear_color","entity_styles","frame_callback","frame_request","last_frame_time","on_animation_frame","now","performance","real_dt","step","entity_id","save","fillStyle","fillRect","canvas","width","height","translate","scale","options","size","fill","entity","parseInt","beginPath","arc","position","x","y","radius","Math","PI","restore","$db57845a13a88892$var$render_world_frame","requestAnimationFrame","pause","cancelAnimationFrame","resume","$9796a8d282a837f1$export$ac4bca90992eed1","this","other","factor","scalar","sqrt","dx","dy","$65cb2f496843b85e$export$63080c4de6cfc362","top","left","bottom","right","center_x","center_y","$65cb2f496843b85e$export$b82688eb02220411","depth","bounds","node","kind","items","Error","child_depth","w2","h2","sw","se","nw","ne","sum","for_each_child","child","nr_items","clear","target_bounds","overlaps","add","includes","push","remove","index","indexOf","splice","callback","threshold","for_each_leaf_with_at_least","$c30043093d44fb83$export$2e2bcd8739ae039","quadtree","subdivisions","bounds_size","from_center_and_radius","old_position","old_bounds","new_bounds","$c30043093d44fb83$var$collision_time","c1","v1","r1","c2","v2","r2","a","b","b2_4ac","dv_x","dv_y","dv_x2","dv_y2","dc_x","dc_y","solution","count","x1","x2","ref","t1","t2","$c30043093d44fb83$export$7f5d6ca1625060a8","entities","time_horizon","collisions","j","k","static","t","velocity","time","$c30043093d44fb83$export$fd0a61d200b47931","center_1","radius_1","center_2","radius_2","distance_squared_to","$c30043093d44fb83$export$7b62f1d061fe35d9","c","clone","subtract","set_length","du","response","elasticity","dot","mass","length_squared","$c30043093d44fb83$export$9acaec0c61023416","distance","r","d2","collision_axis","normalize","offset_magnitude","$6436c79ae1195d8e$var$STATIC_ENTITY_MASS","pow","$6436c79ae1195d8e$var$step_entity","dt","f","applied_force","m_inv","p","v","$6436c79ae1195d8e$export$812cd9544993280d","next_entity_id","Map","collision_culler","collision_culling_subdivisions","undefined","id","set","has","get","delete","entity1","arguments","source","ownKeys","keys","getOwnPropertySymbols","concat","filter","sym","getOwnPropertyDescriptor","forEach","$d48ddae4a704ec47$export$2e2bcd8739ae039","moved","_entity","_this","separate_colliding_entities","high_precision","step_with_high_precision","step_with_low_precision","old_entity_positions","for_each_potential_collision_group","group","intersecting_pairs","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","next","done","_value","entity_1","entity_2","err","return","stepped_entities","Set","step_entity_group","previous_position","earliest_collision","collision","time_step","_iteratorNormalCompletion1","_didIteratorError1","_iteratorError1","_step1","_iterator1","$ee5fc0e5a1abec6c$var$PALETTE","$ee5fc0e5a1abec6c$var$random_in_range","lower","upper","random","window","addEventListener","spawn","canvas_elements","document","getElementsByClassName","item","HTMLCanvasElement","getContext","alpha","controls","total_velocity","for_each_entity","update_required","update"],"version":3,"file":"index.e0d2af00.js.map"}