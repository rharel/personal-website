{"mappings":"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","sources":["projects/rigid-body-physics/rendering.ts","projects/rigid-body-physics/geometry.ts","projects/rigid-body-physics/quadtree.ts","projects/rigid-body-physics/collision.ts","projects/rigid-body-physics/simulation.ts","projects/rigid-body-physics/demo.ts"],"sourcesContent":["import { World } from \"./simulation\";\r\n\r\nexport type EntityStyles = {\r\n  [key: number]: { fill: string };\r\n};\r\n\r\nexport type AnimationControls = {\r\n  pause(): void;\r\n  resume(): void;\r\n};\r\n\r\nfunction render_world_frame(\r\n  world: World,\r\n  context: CanvasRenderingContext2D,\r\n  clear_color: string,\r\n  entity_styles: EntityStyles\r\n) {\r\n  context.save();\r\n\r\n  // Clear canvas.\r\n  context.fillStyle = clear_color;\r\n  context.fillRect(0, 0, context.canvas.width, context.canvas.height);\r\n\r\n  // Flip vertical axis.\r\n  context.translate(0, context.canvas.height);\r\n  context.scale(1, -1);\r\n\r\n  // Scale to world size.\r\n  context.scale(\r\n    context.canvas.width / world.options.size,\r\n    context.canvas.height / world.options.size\r\n  );\r\n\r\n  // Draw entities.\r\n  for (const entity_id in entity_styles) {\r\n    const { fill } = entity_styles[entity_id];\r\n    const entity = world.entity(parseInt(entity_id));\r\n    context.beginPath();\r\n    context.arc(\r\n      entity.position.x,\r\n      entity.position.y,\r\n      entity.radius,\r\n      0,\r\n      2 * Math.PI\r\n    );\r\n    context.fillStyle = fill;\r\n    context.fill();\r\n  }\r\n\r\n  context.restore();\r\n}\r\n\r\nexport function render_world_animation(\r\n  world: World,\r\n  context: CanvasRenderingContext2D,\r\n  clear_color: string,\r\n  entity_styles: EntityStyles,\r\n  frame_callback?: () => void\r\n): AnimationControls {\r\n  // Frame request loop.\r\n  let frame_request: number | null = null;\r\n  let last_frame_time: number | null = null;\r\n  function on_animation_frame() {\r\n    const now = performance.now();\r\n    const real_dt =\r\n      last_frame_time !== null ? (now - last_frame_time) / 1000 : 1 / 60;\r\n    last_frame_time = now;\r\n    world.step(real_dt);\r\n    render_world_frame(\r\n      world,\r\n      context as CanvasRenderingContext2D,\r\n      clear_color,\r\n      entity_styles\r\n    );\r\n    if (frame_callback) {\r\n      frame_callback();\r\n    }\r\n    if (frame_request !== null) {\r\n      frame_request = requestAnimationFrame(on_animation_frame);\r\n    }\r\n  }\r\n\r\n  // Start animation.\r\n  frame_request = requestAnimationFrame(on_animation_frame);\r\n\r\n  return {\r\n    pause() {\r\n      if (frame_request !== null) {\r\n        cancelAnimationFrame(frame_request);\r\n        frame_request = null;\r\n        last_frame_time = null;\r\n      }\r\n    },\r\n    resume() {\r\n      if (frame_request === null) {\r\n        last_frame_time = performance.now();\r\n        frame_request = requestAnimationFrame(on_animation_frame);\r\n      }\r\n    },\r\n  };\r\n}\r\n","export class Vec2 {\r\n  constructor(public x: number, public y: number) {}\r\n\r\n  clone(): Vec2 {\r\n    return new Vec2(this.x, this.y);\r\n  }\r\n\r\n  assign(other: Vec2): Vec2 {\r\n    this.x = other.x;\r\n    this.y = other.y;\r\n    return this;\r\n  }\r\n\r\n  normalize(): Vec2 {\r\n    const factor = 1 / this.length();\r\n    this.x *= factor;\r\n    this.y *= factor;\r\n    return this;\r\n  }\r\n\r\n  set_length(scalar: number): Vec2 {\r\n    const factor = scalar / this.length();\r\n    this.x *= factor;\r\n    this.y *= factor;\r\n    return this;\r\n  }\r\n\r\n  add(other: Vec2): Vec2 {\r\n    this.x += other.x;\r\n    this.y += other.y;\r\n    return this;\r\n  }\r\n\r\n  subtract(other: Vec2): Vec2 {\r\n    this.x -= other.x;\r\n    this.y -= other.y;\r\n    return this;\r\n  }\r\n\r\n  scale(scalar: number): Vec2 {\r\n    this.x *= scalar;\r\n    this.y *= scalar;\r\n    return this;\r\n  }\r\n\r\n  dot(other: Vec2): number {\r\n    return this.x * other.x + this.y * other.y;\r\n  }\r\n\r\n  length_squared(): number {\r\n    return this.x * this.x + this.y * this.y;\r\n  }\r\n\r\n  length(): number {\r\n    return Math.sqrt(this.x * this.x + this.y * this.y);\r\n  }\r\n\r\n  distance_squared_to(other: Vec2): number {\r\n    const dx = other.x - this.x;\r\n    const dy = other.y - this.y;\r\n    return dx * dx + dy * dy;\r\n  }\r\n}\r\n\r\nexport function discs_intersect(\r\n  center_1: Vec2,\r\n  radius_1: number,\r\n  center_2: Vec2,\r\n  radius_2: number\r\n): boolean {\r\n  return (\r\n    center_1.distance_squared_to(center_2) <=\r\n    (radius_1 + radius_2) * (radius_1 + radius_2)\r\n  );\r\n}\r\n","export class BoundingBox {\r\n  readonly bottom: number;\r\n  readonly right: number;\r\n\r\n  constructor(\r\n    readonly top: number,\r\n    readonly left: number,\r\n    readonly width: number,\r\n    readonly height: number\r\n  ) {\r\n    this.bottom = this.top - this.height;\r\n    this.right = this.left + this.width;\r\n  }\r\n\r\n  static from_center_and_radius(\r\n    center_x: number,\r\n    center_y: number,\r\n    radius: number\r\n  ): BoundingBox {\r\n    return new BoundingBox(\r\n      center_y + radius,\r\n      center_x - radius,\r\n      radius,\r\n      radius\r\n    );\r\n  }\r\n\r\n  overlaps(other: BoundingBox): boolean {\r\n    return (\r\n      other.left <= this.right &&\r\n      other.right >= this.left &&\r\n      other.bottom <= this.top &&\r\n      other.top >= this.bottom\r\n    );\r\n  }\r\n}\r\n\r\nexport class QuadTree<T> {\r\n  constructor(readonly depth: number, readonly bounds: BoundingBox) {\r\n    if (this.depth < 1) {\r\n      throw new Error(\"quadtree node cannot have depth < 1\");\r\n    } else if (this.depth === 1) {\r\n      this.node = { kind: \"leaf\", items: [] };\r\n    } else if (this.depth > 1) {\r\n      const child_depth = depth - 1;\r\n      const y = this.bounds.top;\r\n      const x = this.bounds.left;\r\n      const w2 = 0.5 * this.bounds.width;\r\n      const h2 = 0.5 * this.bounds.height;\r\n      this.node = {\r\n        kind: \"internal\",\r\n        sw: new QuadTree(child_depth, new BoundingBox(y - h2, x, w2, h2)),\r\n        se: new QuadTree(child_depth, new BoundingBox(y - h2, x + w2, w2, h2)),\r\n        nw: new QuadTree(child_depth, new BoundingBox(y, x, w2, h2)),\r\n        ne: new QuadTree(child_depth, new BoundingBox(y, x + w2, w2, h2)),\r\n      };\r\n    }\r\n  }\r\n\r\n  nr_items(): number {\r\n    if (this.node.kind === \"leaf\") {\r\n      return this.node.items.length;\r\n    } else {\r\n      let sum = 0;\r\n      this.for_each_child((child) => (sum += child.nr_items()));\r\n      return sum;\r\n    }\r\n  }\r\n\r\n  clear() {\r\n    if (this.node.kind === \"leaf\") {\r\n      this.node.items.length = 0;\r\n    } else {\r\n      this.for_each_child((child) => child.clear());\r\n    }\r\n  }\r\n\r\n  add(entity: T, target_bounds: BoundingBox): void {\r\n    if (!target_bounds.overlaps(this.bounds)) {\r\n      return;\r\n    } else if (this.node.kind === \"internal\") {\r\n      this.for_each_child((child) => {\r\n        if (child.bounds.overlaps(target_bounds)) {\r\n          child.add(entity, target_bounds);\r\n        }\r\n      });\r\n    } else if (!this.node.items.includes(entity)) {\r\n      this.node.items.push(entity);\r\n    }\r\n  }\r\n\r\n  remove(entity: T, target_bounds: BoundingBox): void {\r\n    if (!target_bounds.overlaps(this.bounds)) {\r\n      return;\r\n    } else if (this.node.kind === \"internal\") {\r\n      this.for_each_child((child) => {\r\n        if (child.bounds.overlaps(target_bounds)) {\r\n          child.remove(entity, target_bounds);\r\n        }\r\n      });\r\n    } else if (this.node.items.includes(entity)) {\r\n      const index = this.node.items.indexOf(entity);\r\n      this.node.items.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  for_each_child(callback: (node: QuadTree<T>) => void) {\r\n    if (this.node.kind === \"leaf\") {\r\n      return;\r\n    }\r\n    callback(this.node.sw);\r\n    callback(this.node.se);\r\n    callback(this.node.nw);\r\n    callback(this.node.ne);\r\n  }\r\n\r\n  for_each_leaf_with_at_least(\r\n    threshold: number,\r\n    callback: (items: T[]) => void\r\n  ) {\r\n    if (this.nr_items() < threshold) {\r\n      return;\r\n    } else if (this.node.kind === \"leaf\") {\r\n      callback(this.node.items);\r\n    } else {\r\n      this.for_each_child((child) =>\r\n        child.for_each_leaf_with_at_least(threshold, callback)\r\n      );\r\n    }\r\n  }\r\n\r\n  private readonly node:\r\n    | { kind: \"leaf\"; items: T[] }\r\n    | {\r\n        kind: \"internal\";\r\n        sw: QuadTree<T>;\r\n        se: QuadTree<T>;\r\n        nw: QuadTree<T>;\r\n        ne: QuadTree<T>;\r\n      } = { kind: \"leaf\", items: [] };\r\n}\r\n","import { discs_intersect, Vec2 } from \"./geometry\";\r\nimport { Entity } from \"./simulation\";\r\nimport { BoundingBox, QuadTree } from \"./quadtree\";\r\n\r\nexport type CullingOptions = {\r\n  bounds_size: number;\r\n  subdivisions: number;\r\n};\r\n\r\nexport default class CollisionCuller {\r\n  constructor(readonly options: CullingOptions) {\r\n    this.quadtree = new QuadTree(\r\n      options.subdivisions,\r\n      new BoundingBox(\r\n        options.bounds_size,\r\n        0,\r\n        options.bounds_size,\r\n        options.bounds_size\r\n      )\r\n    );\r\n  }\r\n\r\n  clear() {\r\n    this.quadtree.clear();\r\n  }\r\n\r\n  add(entity: Entity) {\r\n    this.quadtree.add(\r\n      entity,\r\n      BoundingBox.from_center_and_radius(\r\n        entity.position.x,\r\n        entity.position.y,\r\n        entity.radius\r\n      )\r\n    );\r\n  }\r\n\r\n  remove(entity: Entity) {\r\n    this.quadtree.remove(\r\n      entity,\r\n      BoundingBox.from_center_and_radius(\r\n        entity.position.x,\r\n        entity.position.y,\r\n        entity.radius\r\n      )\r\n    );\r\n  }\r\n\r\n  moved(entity: Entity, old_position: Vec2) {\r\n    const old_bounds = BoundingBox.from_center_and_radius(\r\n      old_position.x,\r\n      old_position.y,\r\n      entity.radius\r\n    );\r\n    const new_bounds = BoundingBox.from_center_and_radius(\r\n      entity.position.x,\r\n      entity.position.y,\r\n      entity.radius\r\n    );\r\n    this.quadtree.remove(entity, old_bounds);\r\n    this.quadtree.add(entity, new_bounds);\r\n  }\r\n\r\n  for_each_potential_collision_group(callback: (group: Array<Entity>) => void) {\r\n    this.quadtree.for_each_leaf_with_at_least(2, (items) => {\r\n      callback(items);\r\n    });\r\n  }\r\n\r\n  private readonly quadtree: QuadTree<Entity>;\r\n}\r\n\r\n// Finds roots of a quadratic.\r\nfunction quadratic_solution(\r\n  a: number,\r\n  b: number,\r\n  c: number\r\n):\r\n  | { count: 2; x1: number; x2: number }\r\n  | { count: 1; x1: number }\r\n  | { count: 0 } {\r\n  const b2_4ac = b * b - 4 * a * c;\r\n  if (b2_4ac < 0) {\r\n    return { count: 0 };\r\n  } else if (b2_4ac > 0) {\r\n    return {\r\n      count: 2,\r\n      x1: (-b + Math.sqrt(b2_4ac)) / (2 * a),\r\n      x2: (-b - Math.sqrt(b2_4ac)) / (2 * a),\r\n    };\r\n  } else {\r\n    return { count: 1, x1: -b / (2 * a) };\r\n  }\r\n}\r\n\r\n// Tests whether two discs with the specified velocities collide in the near future.\r\n//\r\n// c1, v1, r1:\r\n//      The first disc's center, velocity, and radius.\r\n// c2, v2, r2:\r\n//      The second disc's center, velocity, and radius.\r\n//\r\n// Returns the time of collision or -1 if there is none.\r\nfunction collision_time(\r\n  c1: Vec2,\r\n  v1: Vec2,\r\n  r1: number,\r\n  c2: Vec2,\r\n  v2: Vec2,\r\n  r2: number\r\n): number {\r\n  // The squared distance between the two centers at time t is:\r\n  //\r\n  // (1)  D(t) = |(c1 + v1 * t) - (c2 + v2 * t)| ^ 2\r\n  //\r\n  // We are interested in finding whether D(t) <= (r1 + r2) ^ 2 on the interval [0, dt].\r\n  // This is equivalent to solving the following equation:\r\n  //\r\n  // (2)   ((c1.x + v1.x * t) - (c2.x + v2.x * t)) ^ 2 +\r\n  //       ((c1.y + v1.y * t) - (c2.y + v2.y * t)) ^ 2 -\r\n  //       (r1 + r2) ^ 2 <= 0\r\n  //\r\n  // Rewrite:\r\n  //\r\n  //      (c1.x - c2.x + (v1.x - v2.x) * t) ^ 2 +\r\n  //      (c1.y - c2.y + (v1.y - v2.y) * t) ^ 2 -\r\n  //      (r1 + r2) ^ 2 <= 0\r\n  //\r\n  // Denote the components of c1 - c2 = [dc_x, dc_y], those of v1 - v2 [dv_x, dv_y], and call\r\n  // r1 + r2 = R:\r\n  //\r\n  //      (dc_x + dv_x * t) ^ 2 +\r\n  //      (dc_y + dv_y * t) ^ 2 -\r\n  //      R ^ 2 <= 0\r\n  //\r\n  // Rewrite:\r\n  //\r\n  //      dc_x^2 + 2*dc_x*dv_x*t + (dv_x^2)*(t^2) +\r\n  //      dc_y^2 + 2*dc_y*dv_y*t + (dv_y^2)*(t^2) -\r\n  //      R ^ 2 <= 0\r\n  //\r\n  // Which can be expressed as:\r\n  //\r\n  //      a*(t^2) + b*t + c <= 0\r\n  //\r\n  // Where:\r\n  //\r\n  //      a = dv_x^2 + dv_y^2\r\n  //      b = 2 * (dc_x*dv_x + dc_y*dv_y)\r\n  //      c = dc_x^2 + dc_y^2 - R^2\r\n  //\r\n  // Solving this yields at most two solutions. All we have to do next is take the minimum\r\n  // of the two that is also contained within the interval [0, dt].\r\n\r\n  const dv_x = v1.x - v2.x;\r\n  const dv_y = v1.y - v2.y;\r\n\r\n  const dv_x2 = dv_x * dv_x;\r\n  const dv_y2 = dv_y * dv_y;\r\n\r\n  const dc_x = c1.x - c2.x;\r\n  const dc_y = c1.y - c2.y;\r\n\r\n  const dc_x2 = dc_x * dc_x;\r\n  const dc_y2 = dc_y * dc_y;\r\n\r\n  const solution = quadratic_solution(\r\n    dv_x2 + dv_y2,\r\n    2 * (dc_x * dv_x + dc_y * dv_y),\r\n    dc_x2 + dc_y2 - (r1 + r2) * (r1 + r2)\r\n  );\r\n\r\n  if (solution.count === 2) {\r\n    const [t1, t2] =\r\n      solution.x1 <= solution.x2\r\n        ? [solution.x1, solution.x2]\r\n        : [solution.x2, solution.x1];\r\n    if (t1 < 0 && t2 >= 0) {\r\n      return 0;\r\n    }\r\n    return t1;\r\n  } else if (solution.count === 1) {\r\n    return solution.x1;\r\n  } else {\r\n    return -1;\r\n  }\r\n}\r\n\r\nexport type Collision = {\r\n  entities: [Entity, Entity];\r\n  time: number;\r\n};\r\n\r\n// Finds near-future colliding pairs.\r\nexport function future_collisions(\r\n  entities: Entity[],\r\n  time_horizon: number\r\n): Collision[] {\r\n  let collisions: Collision[] = [];\r\n  for (let j = 0; j < entities.length; ++j) {\r\n    const a = entities[j];\r\n    for (let k = j + 1; k < entities.length; ++k) {\r\n      const b = entities[k];\r\n\r\n      if (a.static && b.static) {\r\n        continue;\r\n      }\r\n\r\n      const t = collision_time(\r\n        a.position,\r\n        a.velocity,\r\n        a.radius,\r\n        b.position,\r\n        b.velocity,\r\n        b.radius\r\n      );\r\n\r\n      if (0 <= t && t <= time_horizon) {\r\n        collisions.push({\r\n          entities: [a, b],\r\n          time: t,\r\n        });\r\n      }\r\n    }\r\n  }\r\n  return collisions;\r\n}\r\n\r\n// Finds colliding pairs.\r\nexport function present_collisions(entities: Entity[]): [Entity, Entity][] {\r\n  const collisions: [Entity, Entity][] = [];\r\n  for (let j = 0; j < entities.length; ++j) {\r\n    const a = entities[j];\r\n    for (let k = j + 1; k < entities.length; ++k) {\r\n      const b = entities[k];\r\n\r\n      if (a.static && b.static) {\r\n        continue;\r\n      }\r\n\r\n      if (discs_intersect(a.position, a.radius, b.position, b.radius)) {\r\n        collisions.push([a, b]);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  return collisions;\r\n}\r\n\r\n// Applies collision response.\r\nexport function collide_entities(a: Entity, b: Entity) {\r\n  if (a.static && b.static) {\r\n    return;\r\n  }\r\n\r\n  // Ensure static entity is always assigned to a:\r\n  if (b.static) {\r\n    const c = a;\r\n    a = b;\r\n    b = c;\r\n  }\r\n\r\n  const dx = a.position\r\n    .clone()\r\n    .subtract(b.position)\r\n    .set_length(a.radius + b.radius);\r\n  const du = a.velocity.clone().subtract(b.velocity);\r\n\r\n  const coefficient_of_restitution = 0.5 * (a.elasticity + b.elasticity);\r\n  const response =\r\n    (coefficient_of_restitution * 2 * du.dot(dx)) /\r\n    ((a.mass + b.mass) * dx.length_squared());\r\n\r\n  if (!a.static) {\r\n    a.velocity.subtract(dx.clone().scale(response * b.mass));\r\n  }\r\n  if (!b.static) {\r\n    b.velocity.subtract(dx.clone().scale(-response * a.mass));\r\n  }\r\n}\r\n\r\n// Moves entities a minimum distance away from each other.\r\nexport function separate_entities(a: Entity, b: Entity, distance: number) {\r\n  if (a.static && b.static) {\r\n    return;\r\n  }\r\n\r\n  const r = a.radius + b.radius + distance;\r\n  const d2 = a.position.distance_squared_to(b.position);\r\n\r\n  if (d2 >= r * r) {\r\n    return;\r\n  }\r\n\r\n  const collision_axis = a.position.clone().subtract(b.position).normalize();\r\n  const offset_magnitude = r - Math.sqrt(d2);\r\n\r\n  if (a.static) {\r\n    b.position.add(collision_axis.scale(-offset_magnitude));\r\n  } else if (b.static) {\r\n    a.position.add(collision_axis.scale(offset_magnitude));\r\n  } else {\r\n    a.position.add(collision_axis.clone().scale(0.5 * offset_magnitude));\r\n    b.position.add(collision_axis.clone().scale(0.5 * -offset_magnitude));\r\n  }\r\n}\r\n","import { Vec2 } from \"./geometry\";\r\nimport CollisionCuller, {\r\n  future_collisions,\r\n  present_collisions,\r\n  separate_entities,\r\n  collide_entities,\r\n  Collision,\r\n} from \"./collision\";\r\n\r\n// Mass of static entities. Should be extremely large.\r\nconst STATIC_ENTITY_MASS = Math.pow(10, 14);\r\n\r\n// Minimum simulation time increment.\r\nconst MIN_TIME_STEP_SIZE = 0.001;\r\n\r\n// Minimum distance between entities after collision separation.\r\nconst MIN_SEPARATION_DISTANCE = 0.001;\r\n\r\n// Objects whose squared velocity is less than this are considered to be at rest.\r\nconst REST_VELOCITY_THRESHOLD = 0.001;\r\n\r\nexport type Entity = {\r\n  mass: number;\r\n  radius: number;\r\n  elasticity: number;\r\n  static: boolean;\r\n  position: Vec2;\r\n  velocity: Vec2;\r\n  applied_force: Vec2;\r\n};\r\n\r\nexport type EntityView = {\r\n  mass: number;\r\n  radius: number;\r\n  elasticity: number;\r\n  static: boolean;\r\n  position: { x: number; y: number };\r\n  velocity: { x: number; y: number };\r\n  applied_force: { x: number; y: number };\r\n};\r\n\r\nexport type EntityOptions = {\r\n  [key in keyof EntityView]?: EntityView[key];\r\n};\r\n\r\nfunction step_entity(entity: Entity, dt: number) {\r\n  const f = entity.applied_force;\r\n  const m_inv = 1 / entity.mass;\r\n  const p = entity.position;\r\n  const v = entity.velocity;\r\n\r\n  const a = 0.5 * dt * m_inv;\r\n  p.x += dt * (v.x + a * f.x);\r\n  p.y += dt * (v.y + a * f.y);\r\n\r\n  const b = dt * m_inv;\r\n  v.x += b * f.x;\r\n  v.y += b * f.y;\r\n}\r\n\r\nexport type WorldOptions = {\r\n  size: number;\r\n  collision_culling_subdivisions: number;\r\n  high_precision: boolean;\r\n};\r\n\r\nexport class World {\r\n  constructor(readonly options: WorldOptions) {\r\n    this.collision_culler = new CollisionCuller({\r\n      subdivisions: options.collision_culling_subdivisions,\r\n      bounds_size: options.size,\r\n    });\r\n  }\r\n\r\n  clear() {\r\n    this.collision_culler.clear();\r\n    this.entities.clear();\r\n  }\r\n\r\n  spawn(options: EntityOptions): number {\r\n    const entity = {\r\n      mass: options.static\r\n        ? STATIC_ENTITY_MASS\r\n        : options.mass !== undefined\r\n        ? options.mass\r\n        : 1,\r\n      radius: options.radius !== undefined ? options.radius : 1,\r\n      elasticity: options.elasticity !== undefined ? options.elasticity : 0,\r\n      static: options.static !== undefined ? options.static : false,\r\n      position:\r\n        options.position !== undefined\r\n          ? new Vec2(options.position.x, options.position.y)\r\n          : new Vec2(0, 0),\r\n      velocity:\r\n        options.velocity !== undefined\r\n          ? new Vec2(options.velocity.x, options.velocity.y)\r\n          : new Vec2(0, 0),\r\n      applied_force:\r\n        options.applied_force !== undefined\r\n          ? new Vec2(options.applied_force.x, options.applied_force.y)\r\n          : new Vec2(0, 0),\r\n    };\r\n\r\n    const id = this.next_entity_id;\r\n    this.next_entity_id += 1;\r\n\r\n    this.entities.set(id, entity);\r\n    this.collision_culler.add(entity);\r\n\r\n    return id;\r\n  }\r\n\r\n  remove(entity_id: number) {\r\n    if (!this.entities.has(entity_id)) {\r\n      throw new Error(\"bad entity id\");\r\n    }\r\n    const entity = this.entities.get(entity_id) as Entity;\r\n    this.collision_culler.remove(entity);\r\n    this.entities.delete(entity_id);\r\n  }\r\n\r\n  entity(entity_id: number): EntityView {\r\n    if (!this.entities.has(entity_id)) {\r\n      throw new Error(\"bad entity id\");\r\n    }\r\n    const entity = this.entities.get(entity_id) as Entity;\r\n    return {\r\n      ...entity,\r\n      position: { x: entity.position.x, y: entity.position.y },\r\n      velocity: { x: entity.velocity.x, y: entity.velocity.y },\r\n      applied_force: { x: entity.applied_force.x, y: entity.applied_force.y },\r\n    };\r\n  }\r\n\r\n  update(entity_id: number, options: EntityOptions) {\r\n    if (!this.entities.has(entity_id)) {\r\n      throw new Error(\"bad entity id\");\r\n    }\r\n\r\n    const entity = this.entities.get(entity_id) as Entity;\r\n    const old_position = entity.position.clone();\r\n\r\n    if (options.mass !== undefined) {\r\n      entity.mass = options.mass;\r\n    }\r\n    if (options.radius !== undefined) {\r\n      entity.radius = options.radius;\r\n    }\r\n    if (options.elasticity !== undefined) {\r\n      entity.elasticity = options.elasticity;\r\n    }\r\n    if (options.static !== undefined) {\r\n      entity.static = options.static;\r\n      if (entity.static) {\r\n        entity.mass = STATIC_ENTITY_MASS;\r\n      }\r\n    }\r\n    if (options.position !== undefined) {\r\n      entity.position.x = options.position.x;\r\n      entity.position.y = options.position.y;\r\n    }\r\n    if (options.velocity !== undefined) {\r\n      entity.velocity.x = options.velocity.x;\r\n      entity.velocity.y = options.velocity.y;\r\n    }\r\n    if (options.applied_force !== undefined) {\r\n      entity.applied_force.x = options.applied_force.x;\r\n      entity.applied_force.y = options.applied_force.y;\r\n    }\r\n\r\n    if (options.position !== undefined || options.radius !== undefined) {\r\n      this.collision_culler.moved(entity, old_position);\r\n    }\r\n  }\r\n\r\n  for_each_entity(callback: (id: number, entity: EntityView) => void) {\r\n    this.entities.forEach((_entity, entity_id) => {\r\n      callback(entity_id, this.entity(entity_id));\r\n    });\r\n  }\r\n\r\n  step(dt: number) {\r\n    if (dt <= 0) {\r\n      throw new Error(\"cannot step with dt <= 0\");\r\n    }\r\n\r\n    this.separate_colliding_entities();\r\n\r\n    if (this.options.high_precision) {\r\n      this.step_with_high_precision(dt);\r\n    } else {\r\n      this.step_with_low_precision(dt);\r\n    }\r\n\r\n    this.entities.forEach((entity) => {\r\n      if (entity.velocity.length_squared() < REST_VELOCITY_THRESHOLD) {\r\n        entity.velocity.x = 0;\r\n        entity.velocity.y = 0;\r\n      }\r\n    });\r\n  }\r\n\r\n  private separate_colliding_entities() {\r\n    const old_entity_positions = new Map<Entity, Vec2>();\r\n\r\n    this.collision_culler.for_each_potential_collision_group((group) => {\r\n      // Repeatedly find intersecting pairs, separate them, and check for new intersections.\r\n      let intersecting_pairs = present_collisions(group);\r\n      while (intersecting_pairs.length > 0) {\r\n        for (const [entity_1, entity_2] of intersecting_pairs) {\r\n          if (!entity_1.static) {\r\n            old_entity_positions.set(entity_1, entity_1.position.clone());\r\n          }\r\n          if (!entity_2.static) {\r\n            old_entity_positions.set(entity_2, entity_2.position.clone());\r\n          }\r\n          separate_entities(entity_1, entity_2, MIN_SEPARATION_DISTANCE);\r\n          collide_entities(entity_1, entity_2);\r\n        }\r\n        intersecting_pairs = present_collisions(group);\r\n      }\r\n    });\r\n\r\n    old_entity_positions.forEach((old_position, entity) => {\r\n      this.collision_culler.moved(entity, old_position);\r\n    });\r\n  }\r\n\r\n  private step_with_high_precision(dt: number) {\r\n    const stepped_entities = new Set<Entity>();\r\n    const old_entity_positions = new Map<Entity, Vec2>();\r\n\r\n    // Save entity starting positions.\r\n    this.entities.forEach((entity) => {\r\n      old_entity_positions.set(entity, entity.position.clone());\r\n    });\r\n\r\n    // Handle groups of potentially colliding entities.\r\n    this.collision_culler.for_each_potential_collision_group((group) => {\r\n      for (let i = 0; i < group.length; ++i) {\r\n        stepped_entities.add(group[i]);\r\n      }\r\n      this.step_entity_group(group, dt);\r\n    });\r\n\r\n    // Some entities were already stepped forward in time during collision handling,\r\n    // now we step the rest.\r\n    this.entities.forEach((entity) => {\r\n      if (!stepped_entities.has(entity)) {\r\n        step_entity(entity, dt);\r\n      }\r\n    });\r\n\r\n    old_entity_positions.forEach((previous_position, entity) => {\r\n      this.collision_culler.moved(entity, previous_position);\r\n    });\r\n  }\r\n\r\n  private step_entity_group(group: Entity[], dt: number) {\r\n    // Step forward in the time interval [now, now + dt] in small increments, ensuring that\r\n    // collisions are resolved at their precise moment of occurrence.\r\n    let t = dt;\r\n    while (t > MIN_TIME_STEP_SIZE) {\r\n      // Find the time of earliest collision.\r\n      let earliest_collision: Collision | null = null;\r\n      for (const collision of future_collisions(group, t)) {\r\n        if (\r\n          earliest_collision === null ||\r\n          collision.time < earliest_collision.time\r\n        ) {\r\n          earliest_collision = collision;\r\n        }\r\n      }\r\n\r\n      const time_step =\r\n        earliest_collision !== null ? earliest_collision.time : dt;\r\n\r\n      // Step entire group up to the time of earliest collision.\r\n      for (const entity of group) {\r\n        step_entity(entity, time_step);\r\n      }\r\n\r\n      // Handle the earliest collision.\r\n      if (earliest_collision !== null) {\r\n        collide_entities(\r\n          earliest_collision.entities[0],\r\n          earliest_collision.entities[1]\r\n        );\r\n        separate_entities(\r\n          earliest_collision.entities[0],\r\n          earliest_collision.entities[1],\r\n          MIN_SEPARATION_DISTANCE\r\n        );\r\n      }\r\n\r\n      // Update remaining time to move forward in time.\r\n      t -= time_step;\r\n    }\r\n  }\r\n\r\n  private step_with_low_precision(dt: number) {\r\n    this.entities.forEach((entity) => {\r\n      if (!entity.static) {\r\n        const old_position = entity.position.clone();\r\n        step_entity(entity, dt);\r\n        this.collision_culler.moved(entity, old_position);\r\n      }\r\n    });\r\n  }\r\n\r\n  private next_entity_id = 0;\r\n  private readonly collision_culler: CollisionCuller;\r\n  private readonly entities = new Map<number, Entity>();\r\n}\r\n","import { EntityStyles, render_world_animation } from \"./rendering\";\r\nimport { World } from \"./simulation\";\r\nimport { Vec2 } from \"./geometry\";\r\n\r\nconst WORLD_SIZE = 1;\r\nconst NR_PARTICLES = 50;\r\nconst PARTICLE_ENTITY_RADIUS_MIN = (0.02 * WORLD_SIZE * 30) / NR_PARTICLES;\r\nconst PARTICLE_ENTITY_RADIUS_MAX = (0.05 * WORLD_SIZE * 30) / NR_PARTICLES;\r\nconst PARTICLE_VELOCITY_MIN = 0.1 * WORLD_SIZE;\r\nconst PARTICLE_VELOCITY_MAX = 0.5 * WORLD_SIZE;\r\nconst PARTICLE_ELASTICITY = 0.95;\r\nconst PALETTE = [\r\n  \"red\",\r\n  \"blue\",\r\n  \"brown\",\r\n  \"green\",\r\n  \"orange\",\r\n  \"magenta\",\r\n  \"purple\",\r\n];\r\n\r\nfunction random_in_range(lower: number, upper: number): number {\r\n  return lower + Math.random() * (upper - lower);\r\n}\r\n\r\nfunction setup() {\r\n  const entity_styles: EntityStyles = {};\r\n\r\n  const world = new World({\r\n    size: WORLD_SIZE,\r\n    collision_culling_subdivisions: 3,\r\n    high_precision: true,\r\n  });\r\n\r\n  for (let i = 0; i < NR_PARTICLES; ++i) {\r\n    const radius = random_in_range(\r\n      PARTICLE_ENTITY_RADIUS_MIN,\r\n      PARTICLE_ENTITY_RADIUS_MAX\r\n    );\r\n    const mass = Math.PI * radius * radius;\r\n    const particle_id = world.spawn({\r\n      mass,\r\n      radius,\r\n      elasticity: PARTICLE_ELASTICITY,\r\n      position: {\r\n        x: random_in_range(radius, world.options.size - radius),\r\n        y: random_in_range(radius, world.options.size - radius),\r\n      },\r\n      velocity: new Vec2(\r\n        random_in_range(-1, 1),\r\n        random_in_range(-1, 1)\r\n      ).set_length(\r\n        random_in_range(PARTICLE_VELOCITY_MIN, PARTICLE_VELOCITY_MAX)\r\n      ),\r\n    });\r\n    entity_styles[particle_id] = { fill: PALETTE[i % PALETTE.length] };\r\n  }\r\n\r\n  const canvas_elements = document.getElementsByClassName(\"demo-canvas\");\r\n  if (canvas_elements.length !== 1) {\r\n    throw new Error(`expected 1 demo canvas, found ${canvas_elements.length}`);\r\n  }\r\n\r\n  const canvas = canvas_elements.item(0);\r\n  if (!(canvas instanceof HTMLCanvasElement)) {\r\n    throw new Error(`expected canvas element, found ${typeof canvas}`);\r\n  }\r\n\r\n  const context = canvas.getContext(\"2d\", { alpha: false });\r\n  if (context === null) {\r\n    throw new Error(\"cannot get rendering context\");\r\n  }\r\n\r\n  const clear_color = window.matchMedia(\"(prefers-color-scheme: dark)\").matches\r\n    ? \"black\"\r\n    : \"white\";\r\n\r\n  const controls = render_world_animation(\r\n    world,\r\n    context,\r\n    clear_color,\r\n    entity_styles,\r\n    () => {\r\n      let total_velocity = 0;\r\n      world.for_each_entity((entity_id, entity) => {\r\n        let update_required = false;\r\n        if (entity.position.x < entity.radius) {\r\n          entity.position.x = entity.radius;\r\n          entity.velocity.x *= -1;\r\n          update_required = true;\r\n        }\r\n        if (entity.position.x > world.options.size - entity.radius) {\r\n          entity.position.x = world.options.size - entity.radius;\r\n          entity.velocity.x *= -1;\r\n          update_required = true;\r\n        }\r\n        if (entity.position.y < entity.radius) {\r\n          entity.position.y = entity.radius;\r\n          entity.velocity.y *= -1;\r\n          update_required = true;\r\n        }\r\n        if (entity.position.y > world.options.size - entity.radius) {\r\n          entity.position.y = world.options.size - entity.radius;\r\n          entity.velocity.y *= -1;\r\n          update_required = true;\r\n        }\r\n        if (update_required) {\r\n          world.update(entity_id, {\r\n            position: entity.position,\r\n            velocity: entity.velocity,\r\n          });\r\n        }\r\n        total_velocity += entity.velocity.x + entity.velocity.y;\r\n      });\r\n      if (total_velocity === 0) {\r\n        controls.pause();\r\n      }\r\n    }\r\n  );\r\n}\r\n\r\nwindow.addEventListener(\"DOMContentLoaded\", setup);\r\n"],"names":["$92df0325268d5d47$export$f4adcd6d36513d43","world","context","clear_color","entity_styles","frame_callback","frame_request","last_frame_time","on_animation_frame","now","performance","real_dt","step","save","fillStyle","fillRect","canvas","width","height","translate","scale","options","size","entity_id","fill","entity","parseInt","beginPath","arc","position","x","y","radius","Math","PI","restore","$92df0325268d5d47$var$render_world_frame","requestAnimationFrame","pause","cancelAnimationFrame","resume","$79bdaf91ddabfb91$export$ac4bca90992eed1","clone","this","assign","other","normalize","factor","length","set_length","scalar","add","subtract","dot","length_squared","sqrt","distance_squared_to","dx","dy","constructor","$b1d81ba20a88f1e6$export$63080c4de6cfc362","static","center_x","center_y","overlaps","left","right","bottom","top","$b1d81ba20a88f1e6$export$b82688eb02220411","nr_items","node","kind","items","sum","for_each_child","child","clear","target_bounds","bounds","includes","push","remove","index","indexOf","splice","callback","sw","se","nw","ne","for_each_leaf_with_at_least","threshold","depth","Error","child_depth","w2","h2","$296bc57a304a4f5f$export$2e2bcd8739ae039","quadtree","from_center_and_radius","moved","old_position","old_bounds","new_bounds","for_each_potential_collision_group","subdivisions","bounds_size","$296bc57a304a4f5f$var$collision_time","c1","v1","r1","c2","v2","r2","dv_x","dv_y","dv_x2","dv_y2","dc_x","dc_y","solution","a","b","c","b2_4ac","count","x1","x2","$296bc57a304a4f5f$var$quadratic_solution","t1","t2","$296bc57a304a4f5f$export$7f5d6ca1625060a8","entities","time_horizon","collisions","j","k","t","velocity","time","$296bc57a304a4f5f$export$fd0a61d200b47931","center_1","radius_1","center_2","radius_2","$296bc57a304a4f5f$export$7b62f1d061fe35d9","du","response","elasticity","mass","$296bc57a304a4f5f$export$9acaec0c61023416","distance","r","d2","collision_axis","offset_magnitude","$12fff36ccf056a0a$var$STATIC_ENTITY_MASS","pow","$12fff36ccf056a0a$var$step_entity","dt","f","applied_force","m_inv","p","v","$12fff36ccf056a0a$export$812cd9544993280d","collision_culler","spawn","undefined","id","next_entity_id","set","has","get","delete","update","for_each_entity","forEach","_entity","separate_colliding_entities","high_precision","step_with_high_precision","step_with_low_precision","old_entity_positions","Map","group","intersecting_pairs","entity_1","entity_2","stepped_entities","Set","i","step_entity_group","previous_position","earliest_collision","collision","time_step","collision_culling_subdivisions","$a75101aa2d33e430$var$PALETTE","$a75101aa2d33e430$var$random_in_range","lower","upper","random","window","addEventListener","canvas_elements","document","getElementsByClassName","item","HTMLCanvasElement","getContext","alpha","matchMedia","matches","controls","total_velocity","update_required"],"version":3,"file":"index.9d9568d7.js.map"}