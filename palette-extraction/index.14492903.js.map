{"mappings":"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","sources":["projects/palette-extraction/k_means_clustering.ts","projects/palette-extraction/image_palette_extraction.ts","projects/palette-extraction/color_conversion.ts","projects/palette-extraction/demo.ts"],"sourcesContent":["function clone<T>(value: T): T {\r\n  return JSON.parse(JSON.stringify(value));\r\n}\r\n\r\nexport type Sample = number[];\r\nexport type Cluster = { mean: Sample; size: number };\r\n\r\nexport function k_means_clusters(\r\n  samples: Sample[],\r\n  cluster_count: number,\r\n  initial_guess: Sample[],\r\n  distance: (a: Sample, b: Sample) => number\r\n): Cluster[] {\r\n  const cluster_means = clone(initial_guess);\r\n  let cluster_of_sample: number[] = new Array(samples.length).fill(-1);\r\n  let cluster_size: number[] = new Array(cluster_count).fill(0);\r\n  let clusters_changed = true;\r\n\r\n  while (clusters_changed) {\r\n    cluster_size.fill(0);\r\n    clusters_changed = false;\r\n\r\n    // Associate each sample with its nearest cluster mean.\r\n    samples.forEach((sample, sample_index) => {\r\n      let nearest_cluster_mean_index = 0;\r\n      let nearest_cluster_mean_distance = distance(sample, cluster_means[0]);\r\n      for (let i = 1; i < cluster_count; ++i) {\r\n        const distance_to_cluster_mean_i = distance(sample, cluster_means[i]);\r\n        if (distance_to_cluster_mean_i < nearest_cluster_mean_distance) {\r\n          nearest_cluster_mean_distance = distance_to_cluster_mean_i;\r\n          nearest_cluster_mean_index = i;\r\n        }\r\n      }\r\n\r\n      if (\r\n        cluster_of_sample[sample_index] === -1 ||\r\n        cluster_of_sample[sample_index] !== nearest_cluster_mean_index\r\n      ) {\r\n        clusters_changed = true;\r\n      }\r\n\r\n      cluster_of_sample[sample_index] = nearest_cluster_mean_index;\r\n      cluster_size[nearest_cluster_mean_index] += 1;\r\n    });\r\n\r\n    // Recompute the means.\r\n    if (clusters_changed) {\r\n      cluster_means.forEach((mean) => mean.fill(0));\r\n      samples.forEach((sample, sample_index) => {\r\n        const sample_cluster_index = cluster_of_sample[sample_index];\r\n        const sample_cluster_size = cluster_size[sample_cluster_index];\r\n        const cluster_mean = cluster_means[sample_cluster_index];\r\n        cluster_mean.forEach(\r\n          (_, i) => (cluster_mean[i] += sample[i] / sample_cluster_size)\r\n        );\r\n      });\r\n    }\r\n  }\r\n\r\n  return cluster_means\r\n    .map((mean, index) => {\r\n      return {\r\n        mean,\r\n        size: cluster_size[index],\r\n      };\r\n    })\r\n    .filter((cluster) => cluster.size > 0);\r\n}\r\n","import { Color, hsl_from_rgb, rgb_from_hsl } from \"./color_conversion\";\r\nimport { k_means_clusters, Sample } from \"./k_means_clustering\";\r\n\r\nfunction random_integer_in_range(min: number, max: number): number {\r\n  return min + Math.floor(Math.random() * (max - min + 1));\r\n}\r\n\r\nexport function palette_from_image_data(\r\n  image_data: ImageData,\r\n  sampling_cell_size: number,\r\n  palette_size: number\r\n): Color[] {\r\n  // Collect color observations using jittered-grid super sampling.\r\n  const samples_rgb: Color[] = [];\r\n  for (\r\n    let x_min = 0;\r\n    x_min < image_data.width - sampling_cell_size;\r\n    x_min += sampling_cell_size\r\n  ) {\r\n    for (\r\n      let y_min = 0;\r\n      y_min < image_data.height - sampling_cell_size;\r\n      y_min += sampling_cell_size\r\n    ) {\r\n      const x = random_integer_in_range(x_min, x_min + sampling_cell_size);\r\n      const y = random_integer_in_range(y_min, y_min + sampling_cell_size);\r\n      const sample_index = 4 * (x + y * image_data.width);\r\n      const sample_slice = image_data.data.slice(\r\n        sample_index,\r\n        sample_index + 3\r\n      );\r\n      samples_rgb.push([sample_slice[0], sample_slice[1], sample_slice[2]]);\r\n    }\r\n  }\r\n\r\n  const samples_hsl: Color[] = samples_rgb.map((color) =>\r\n    hsl_from_rgb(color[0], color[1], color[2])\r\n  );\r\n\r\n  const clusters_initial_guess: Color[] = [];\r\n  for (let i = 0; i < palette_size; i += 1) {\r\n    const random_index = random_integer_in_range(0, samples_hsl.length - 1);\r\n    clusters_initial_guess.push(samples_hsl[random_index]);\r\n  }\r\n\r\n  function hsl_distance(a: Sample, b: Sample): number {\r\n    return (\r\n      (a[0] - b[0]) * (a[0] - b[0]) +\r\n      (a[1] - b[1]) * (a[1] - b[1]) +\r\n      (a[2] - b[2]) * (a[2] - b[2])\r\n    );\r\n  }\r\n\r\n  return k_means_clusters(\r\n    samples_hsl,\r\n    palette_size,\r\n    clusters_initial_guess,\r\n    hsl_distance\r\n  )\r\n    .sort((a, b) => b.size - a.size)\r\n    .map((cluster) =>\r\n      rgb_from_hsl(cluster.mean[0], cluster.mean[1], cluster.mean[2])\r\n    );\r\n}\r\n\r\nexport function palette_from_image_element(\r\n  image: HTMLImageElement,\r\n  sampling_cell_size: number,\r\n  palette_size: number\r\n): Color[] {\r\n  const canvas = document.createElement(\"canvas\");\r\n  canvas.width = image.naturalWidth;\r\n  canvas.height = image.naturalHeight;\r\n\r\n  const context = canvas.getContext(\"2d\");\r\n  if (context === null) {\r\n    throw new Error(\"cannot get canvas context\");\r\n  }\r\n\r\n  context.drawImage(image, 0, 0, canvas.width, canvas.height);\r\n  const image_data = context.getImageData(0, 0, canvas.width, canvas.height);\r\n  return palette_from_image_data(image_data, sampling_cell_size, palette_size);\r\n}\r\n","export type Color = [number, number, number];\r\n\r\n// Generates triplet [h, s, l] with members in [0, 1] from triplet r, g, b with members\r\n// in [0, 255].\r\n//\r\n// Adapted from https://gist.github.com/mjackson/5311256\r\nexport function hsl_from_rgb(r: number, g: number, b: number): Color {\r\n  r /= 255;\r\n  g /= 255;\r\n  b /= 255;\r\n\r\n  const max = Math.max(r, g, b);\r\n  const min = Math.min(r, g, b);\r\n\r\n  let h = 0;\r\n  let s = 0;\r\n  let l = (max + min) / 2;\r\n\r\n  if (max === min) {\r\n    h = 0;\r\n    s = 0;\r\n  } // achromatic\r\n  else {\r\n    const span = max - min;\r\n    s = l > 0.5 ? span / (2 - max - min) : span / (max + min);\r\n    switch (max) {\r\n      case r:\r\n        h = (g - b) / span + (g < b ? 6 : 0);\r\n        break;\r\n      case g:\r\n        h = (b - r) / span + 2;\r\n        break;\r\n      case b:\r\n        h = (r - g) / span + 4;\r\n        break;\r\n    }\r\n    h /= 6;\r\n  }\r\n  return [h, s, l];\r\n}\r\n\r\n// Generates triplet [r, g, b] with members in [0, 255] from triplet h, s, l with members\r\n// in [0, 1].\r\n//\r\n// Adapted from https://gist.github.com/mjackson/5311256\r\nexport function rgb_from_hsl(h: number, s: number, l: number): Color {\r\n  function rgb_from_hue(p: number, q: number, t: number) {\r\n    if (t < 0) t += 1;\r\n    if (t > 1) t -= 1;\r\n    if (t < 1 / 6) return p + (q - p) * 6 * t;\r\n    if (t < 1 / 2) return q;\r\n    if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\r\n    return p;\r\n  }\r\n\r\n  let r = 0;\r\n  let g = 0;\r\n  let b = 0;\r\n\r\n  if (s === 0) {\r\n    r = l;\r\n    g = l;\r\n    b = l;\r\n  } // achromatic\r\n  else {\r\n    const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\r\n    const p = 2 * l - q;\r\n    r = rgb_from_hue(p, q, h + 1 / 3);\r\n    g = rgb_from_hue(p, q, h);\r\n    b = rgb_from_hue(p, q, h - 1 / 3);\r\n  }\r\n  return [\r\n    Math.max(Math.min(r * 256, 255), 0),\r\n    Math.max(Math.min(g * 256, 255), 0),\r\n    Math.max(Math.min(b * 256, 255), 0),\r\n  ];\r\n}\r\n","import { palette_from_image_element } from \"./image_palette_extraction\";\r\n\r\nfunction on_selected_image_change(file_input: HTMLInputElement) {\r\n  if (file_input.files === null || file_input.files.length !== 1) {\r\n    return;\r\n  }\r\n  const file = file_input.files.item(0);\r\n  if (file === null) {\r\n    return;\r\n  }\r\n  const image = new Image();\r\n  image.src = URL.createObjectURL(file);\r\n  image.addEventListener(\"load\", () => {\r\n    const color_elements = document.querySelectorAll<HTMLElement>(\r\n      \".demo-palette-color\"\r\n    );\r\n    const palette_size = color_elements.length;\r\n    const sampling_cell_size = Math.ceil(\r\n      Math.min(image.naturalWidth, image.naturalHeight) / 20\r\n    );\r\n    const palette = palette_from_image_element(\r\n      image,\r\n      sampling_cell_size,\r\n      palette_size\r\n    ).map((color) => color.map(Math.round));\r\n    for (let i = 0; i < color_elements.length; i += 1) {\r\n      color_elements.item(i).style.removeProperty(\"background-color\");\r\n    }\r\n    for (let i = 0; i < palette.length; i += 1) {\r\n      const color = palette[i];\r\n      const element = color_elements.item(i);\r\n      element.style.backgroundColor = `rgb(${color[0]}, ${color[1]}, ${color[2]})`;\r\n      element.setAttribute(\r\n        \"aria-label\",\r\n        `Colored square: rgb(${color[0]}, ${color[1]}, ${color[2]})`\r\n      );\r\n    }\r\n  });\r\n}\r\n\r\nfunction setup() {\r\n  const file_input = document.getElementById(\"demo-image\");\r\n  if (!(file_input instanceof HTMLInputElement)) {\r\n    return;\r\n  }\r\n  file_input.addEventListener(\"change\", () =>\r\n    on_selected_image_change(file_input)\r\n  );\r\n  document\r\n    .getElementById(\"demo-select-image-button\")\r\n    ?.addEventListener(\"click\", () => file_input.click());\r\n}\r\n\r\nwindow.addEventListener(\"DOMContentLoaded\", setup);\r\n"],"names":["$22df7d588c6ad6ef$export$1010be256a6932bb","samples","cluster_count","initial_guess","distance","cluster_means","value","JSON","parse","stringify","cluster_of_sample","Array","length","fill","cluster_size","clusters_changed","forEach","sample","sample_index","nearest_cluster_mean_index","nearest_cluster_mean_distance","i","distance_to_cluster_mean_i","mean","sample_cluster_index","sample_cluster_size","cluster_mean","_","map","index","size","filter","cluster","$64cc8ecea770fe07$var$random_integer_in_range","min","max","Math","floor","random","$64cc8ecea770fe07$export$85a4233b636598d","image_data","sampling_cell_size","palette_size","samples_rgb","x_min","width","y_min","height","sample_slice","data","slice","push","samples_hsl","color","r","g","b","h","s","l","span","$5acd4814b1dd22fa$export$69d5a0bee28624af","clusters_initial_guess","random_index","a","sort","rgb_from_hue","p","q","t","$5acd4814b1dd22fa$export$b973f735a0b1be26","$890a7e4059f9b56c$var$on_selected_image_change","file_input","files","file","item","image","Image","src","URL","createObjectURL","addEventListener","color_elements","document","querySelectorAll","ceil","naturalWidth","naturalHeight","palette","canvas","createElement","context","getContext","Error","drawImage","getImageData","$64cc8ecea770fe07$export$1059ec8f4511ea27","round","style","removeProperty","i1","element","backgroundColor","setAttribute","window","ref","getElementById","HTMLInputElement","click"],"version":3,"file":"index.14492903.js.map"}