{"mappings":"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","sources":["<anon>","projects/game-of-life/demo.ts","projects/game-of-life/game_of_life.ts"],"sourcesContent":["class $e3b144ce6cc43a85$export$69c0232701838d91 {\n    constructor(width, height){\n        this.width = width;\n        this.height = height;\n        this.cells = new Uint8Array(width * height);\n    }\n    cell_index(x, y) {\n        return x + y * this.width;\n    }\n    get(x, y) {\n        return 0 <= x && x < this.width && 0 <= y && y < this.height && this.cells[this.cell_index(x, y)] !== 0;\n    }\n    set(x, y, alive) {\n        this.cells[this.cell_index(x, y)] = +alive;\n    }\n}\nfunction $e3b144ce6cc43a85$export$35d233f3b2dbf62a(current_state, future_state) {\n    if (current_state.width !== future_state.width || current_state.height !== future_state.height) throw new Error(\"world dimension mismatch\");\n    const change_coords = [];\n    for(let x = 0; x < current_state.width; x += 1)for(let y = 0; y < current_state.height; y += 1){\n        const nr_living_neighbors = +current_state.get(x - 1, y - 1) + +current_state.get(x - 1, y) + +current_state.get(x - 1, y + 1) + +current_state.get(x, y - 1) + +current_state.get(x, y + 1) + +current_state.get(x + 1, y - 1) + +current_state.get(x + 1, y) + +current_state.get(x + 1, y + 1);\n        future_state.set(x, y, current_state.get(x, y) ? nr_living_neighbors === 2 || nr_living_neighbors === 3 : nr_living_neighbors === 3);\n        if (future_state.get(x, y) !== current_state.get(x, y)) change_coords.push({\n            x: x,\n            y: y\n        });\n    }\n    return change_coords;\n}\n\n\nfunction $3261096bd74b744f$var$draw_world_state(context, world_state, change_coords) {\n    const cell_size = context.canvas.width / world_state.width;\n    if (change_coords !== undefined) for (const { x: x, y: y } of change_coords){\n        let rect_offset;\n        let rect_size;\n        if (world_state.get(x, y)) {\n            rect_offset = 0;\n            rect_size = cell_size;\n        } else {\n            rect_offset = -1;\n            rect_size = cell_size + 2;\n        }\n        context.fillStyle = world_state.get(x, y) ? \"black\" : \"white\";\n        context.fillRect(x * cell_size + rect_offset, y * cell_size + rect_offset, rect_size, rect_size);\n    }\n    else {\n        context.fillStyle = \"white\";\n        context.fillRect(0, 0, context.canvas.width, context.canvas.height);\n        context.fillStyle = \"black\";\n        for(let x = 0; x < world_state.width; x += 1){\n            for(let y = 0; y < world_state.height; y += 1)if (world_state.get(x, y)) context.fillRect(x * cell_size, y * cell_size, cell_size, cell_size);\n        }\n    }\n}\nfunction $3261096bd74b744f$var$animate(context, initial_state, fps) {\n    let current_state = initial_state;\n    let future_state = new (0, $e3b144ce6cc43a85$export$69c0232701838d91)(current_state.width, current_state.height);\n    $3261096bd74b744f$var$draw_world_state(context, current_state);\n    let paused = false;\n    function draw_frame() {\n        const change_coords = (0, $e3b144ce6cc43a85$export$35d233f3b2dbf62a)(current_state, future_state);\n        $3261096bd74b744f$var$draw_world_state(context, future_state, change_coords);\n        const buffer = current_state;\n        current_state = future_state;\n        future_state = buffer;\n        if (!paused) setTimeout(()=>{\n            requestAnimationFrame(draw_frame);\n        }, 1000 / fps);\n    }\n    setTimeout(()=>{\n        requestAnimationFrame(draw_frame);\n    }, 1000 / fps);\n    function toggle_pause() {\n        paused = !paused;\n        if (!paused) setTimeout(()=>{\n            requestAnimationFrame(draw_frame);\n        }, 1000 / fps);\n    }\n    return toggle_pause;\n}\nfunction $3261096bd74b744f$var$setup() {\n    const canvas = document.getElementById(\"demo-canvas\");\n    if (!(canvas instanceof HTMLCanvasElement)) throw new Error(`expected canvas element, found ${typeof canvas}`);\n    const context = canvas.getContext(\"2d\", {\n        alpha: false\n    });\n    if (context === null) throw new Error(\"cannot get rendering context\");\n    const initial_state = new (0, $e3b144ce6cc43a85$export$69c0232701838d91)(44, 44);\n    const pattern_offset_x = 4;\n    const pattern_offset_y = 6;\n    const glider_gun_pattern = [\n        \"........................O\",\n        \"......................O.O\",\n        \"............OO......OO............OO\",\n        \"...........O...O....OO............OO\",\n        \"OO........O.....O...OO\",\n        \"OO........O...O.OO....O.O\",\n        \"..........O.....O.......O\",\n        \"...........O...O\",\n        \"............OO\"\n    ];\n    for(let y = 0; y < glider_gun_pattern.length; y += 1){\n        const row = glider_gun_pattern[y];\n        for(let x = 0; x < row.length; x += 1)if (row[x] !== \".\") initial_state.set(x + pattern_offset_x, y + pattern_offset_y, true);\n    }\n    const toggle_pause = $3261096bd74b744f$var$animate(context, initial_state, 30);\n    document.getElementById(\"demo-toggle-pause-button\")?.addEventListener(\"click\", toggle_pause);\n}\nwindow.addEventListener(\"DOMContentLoaded\", $3261096bd74b744f$var$setup);\n\n\n//# sourceMappingURL=index.0004e446.js.map\n","import { advance, CellCoords, WorldState } from \"./game_of_life\";\r\n\r\nfunction draw_world_state(\r\n  context: CanvasRenderingContext2D,\r\n  world_state: WorldState,\r\n  change_coords?: CellCoords[]\r\n) {\r\n  const cell_size = context.canvas.width / world_state.width;\r\n\r\n  if (change_coords !== undefined) {\r\n    for (const { x, y } of change_coords) {\r\n      let rect_offset;\r\n      let rect_size;\r\n      if (world_state.get(x, y)) {\r\n        rect_offset = 0;\r\n        rect_size = cell_size;\r\n      } else {\r\n        rect_offset = -1;\r\n        rect_size = cell_size + 2;\r\n      }\r\n      context.fillStyle = world_state.get(x, y) ? \"black\" : \"white\";\r\n      context.fillRect(\r\n        x * cell_size + rect_offset,\r\n        y * cell_size + rect_offset,\r\n        rect_size,\r\n        rect_size\r\n      );\r\n    }\r\n  } else {\r\n    context.fillStyle = \"white\";\r\n    context.fillRect(0, 0, context.canvas.width, context.canvas.height);\r\n\r\n    context.fillStyle = \"black\";\r\n    for (let x = 0; x < world_state.width; x += 1) {\r\n      for (let y = 0; y < world_state.height; y += 1) {\r\n        if (world_state.get(x, y)) {\r\n          context.fillRect(x * cell_size, y * cell_size, cell_size, cell_size);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction animate(\r\n  context: CanvasRenderingContext2D,\r\n  initial_state: WorldState,\r\n  fps: number\r\n) {\r\n  let current_state = initial_state;\r\n  let future_state = new WorldState(current_state.width, current_state.height);\r\n  draw_world_state(context, current_state);\r\n\r\n  let paused = false;\r\n\r\n  function draw_frame() {\r\n    const change_coords = advance(current_state, future_state);\r\n    draw_world_state(context, future_state, change_coords);\r\n\r\n    const buffer = current_state;\r\n    current_state = future_state;\r\n    future_state = buffer;\r\n\r\n    if (!paused) {\r\n      setTimeout(() => {\r\n        requestAnimationFrame(draw_frame);\r\n      }, 1000 / fps);\r\n    }\r\n  }\r\n\r\n  setTimeout(() => {\r\n    requestAnimationFrame(draw_frame);\r\n  }, 1000 / fps);\r\n\r\n  function toggle_pause() {\r\n    paused = !paused;\r\n    if (!paused) {\r\n      setTimeout(() => {\r\n        requestAnimationFrame(draw_frame);\r\n      }, 1000 / fps);\r\n    }\r\n  }\r\n  return toggle_pause;\r\n}\r\n\r\nfunction setup() {\r\n  const canvas = document.getElementById(\"demo-canvas\");\r\n  if (!(canvas instanceof HTMLCanvasElement)) {\r\n    throw new Error(`expected canvas element, found ${typeof canvas}`);\r\n  }\r\n\r\n  const context = canvas.getContext(\"2d\", { alpha: false });\r\n  if (context === null) {\r\n    throw new Error(\"cannot get rendering context\");\r\n  }\r\n\r\n  const initial_state = new WorldState(44, 44);\r\n  const pattern_offset_x = 4;\r\n  const pattern_offset_y = 6;\r\n  const glider_gun_pattern = [\r\n    \"........................O\",\r\n    \"......................O.O\",\r\n    \"............OO......OO............OO\",\r\n    \"...........O...O....OO............OO\",\r\n    \"OO........O.....O...OO\",\r\n    \"OO........O...O.OO....O.O\",\r\n    \"..........O.....O.......O\",\r\n    \"...........O...O\",\r\n    \"............OO\",\r\n  ];\r\n  for (let y = 0; y < glider_gun_pattern.length; y += 1) {\r\n    const row = glider_gun_pattern[y];\r\n    for (let x = 0; x < row.length; x += 1) {\r\n      if (row[x] !== \".\") {\r\n        initial_state.set(x + pattern_offset_x, y + pattern_offset_y, true);\r\n      }\r\n    }\r\n  }\r\n\r\n  const toggle_pause = animate(context, initial_state, 30);\r\n\r\n  document\r\n    .getElementById(\"demo-toggle-pause-button\")\r\n    ?.addEventListener(\"click\", toggle_pause);\r\n}\r\n\r\nwindow.addEventListener(\"DOMContentLoaded\", setup);\r\n","export type CellCoords = { x: number; y: number };\r\n\r\nexport class WorldState {\r\n  constructor(readonly width: number, readonly height: number) {\r\n    this.cells = new Uint8Array(width * height);\r\n  }\r\n\r\n  cell_index(x: number, y: number): number {\r\n    return x + y * this.width;\r\n  }\r\n\r\n  get(x: number, y: number): boolean {\r\n    return (\r\n      0 <= x &&\r\n      x < this.width &&\r\n      0 <= y &&\r\n      y < this.height &&\r\n      this.cells[this.cell_index(x, y)] !== 0\r\n    );\r\n  }\r\n\r\n  set(x: number, y: number, alive: boolean) {\r\n    this.cells[this.cell_index(x, y)] = +alive;\r\n  }\r\n\r\n  private readonly cells: Uint8Array;\r\n}\r\n\r\nexport function advance(\r\n  current_state: WorldState,\r\n  future_state: WorldState\r\n): CellCoords[] {\r\n  if (\r\n    current_state.width !== future_state.width ||\r\n    current_state.height !== future_state.height\r\n  ) {\r\n    throw new Error(\"world dimension mismatch\");\r\n  }\r\n  const change_coords: CellCoords[] = [];\r\n  for (let x = 0; x < current_state.width; x += 1) {\r\n    for (let y = 0; y < current_state.height; y += 1) {\r\n      const nr_living_neighbors =\r\n        +current_state.get(x - 1, y - 1) +\r\n        +current_state.get(x - 1, y) +\r\n        +current_state.get(x - 1, y + 1) +\r\n        +current_state.get(x, y - 1) +\r\n        +current_state.get(x, y + 1) +\r\n        +current_state.get(x + 1, y - 1) +\r\n        +current_state.get(x + 1, y) +\r\n        +current_state.get(x + 1, y + 1);\r\n      future_state.set(\r\n        x,\r\n        y,\r\n        current_state.get(x, y)\r\n          ? nr_living_neighbors === 2 || nr_living_neighbors === 3\r\n          : nr_living_neighbors === 3\r\n      );\r\n      if (future_state.get(x, y) !== current_state.get(x, y)) {\r\n        change_coords.push({ x, y });\r\n      }\r\n    }\r\n  }\r\n  return change_coords;\r\n}\r\n"],"names":["$e3b144ce6cc43a85$export$69c0232701838d91","constructor","width","height","cells","Uint8Array","cell_index","x","y","get","set","alive","$3261096bd74b744f$var$draw_world_state","context","world_state","change_coords","cell_size","canvas","undefined","rect_offset","rect_size","fillStyle","fillRect","window","addEventListener","document","getElementById","HTMLCanvasElement","Error","getContext","alpha","initial_state","glider_gun_pattern","length","row","toggle_pause","$3261096bd74b744f$var$animate","fps","current_state","future_state","paused","draw_frame","nr_living_neighbors","push","buffer","setTimeout","requestAnimationFrame"],"version":3,"file":"index.0004e446.js.map"}