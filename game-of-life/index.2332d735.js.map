{"mappings":"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","sources":["projects/game-of-life/game_of_life.ts","projects/game-of-life/demo.ts"],"sourcesContent":["export type CellCoords = { x: number; y: number };\r\n\r\nexport class WorldState {\r\n  constructor(readonly width: number, readonly height: number) {\r\n    this.cells = new Uint8Array(width * height);\r\n  }\r\n\r\n  cell_index(x: number, y: number): number {\r\n    return x + y * this.width;\r\n  }\r\n\r\n  get(x: number, y: number): boolean {\r\n    return (\r\n      0 <= x &&\r\n      x < this.width &&\r\n      0 <= y &&\r\n      y < this.height &&\r\n      this.cells[this.cell_index(x, y)] !== 0\r\n    );\r\n  }\r\n\r\n  set(x: number, y: number, alive: boolean) {\r\n    this.cells[this.cell_index(x, y)] = +alive;\r\n  }\r\n\r\n  private readonly cells: Uint8Array;\r\n}\r\n\r\nexport function advance(\r\n  current_state: WorldState,\r\n  future_state: WorldState\r\n): CellCoords[] {\r\n  if (\r\n    current_state.width !== future_state.width ||\r\n    current_state.height !== future_state.height\r\n  ) {\r\n    throw new Error(\"world dimension mismatch\");\r\n  }\r\n  const change_coords: CellCoords[] = [];\r\n  for (let x = 0; x < current_state.width; x += 1) {\r\n    for (let y = 0; y < current_state.height; y += 1) {\r\n      const nr_living_neighbors =\r\n        +current_state.get(x - 1, y - 1) +\r\n        +current_state.get(x - 1, y) +\r\n        +current_state.get(x - 1, y + 1) +\r\n        +current_state.get(x, y - 1) +\r\n        +current_state.get(x, y + 1) +\r\n        +current_state.get(x + 1, y - 1) +\r\n        +current_state.get(x + 1, y) +\r\n        +current_state.get(x + 1, y + 1);\r\n      future_state.set(\r\n        x,\r\n        y,\r\n        current_state.get(x, y)\r\n          ? nr_living_neighbors === 2 || nr_living_neighbors === 3\r\n          : nr_living_neighbors === 3\r\n      );\r\n      if (future_state.get(x, y) !== current_state.get(x, y)) {\r\n        change_coords.push({ x, y });\r\n      }\r\n    }\r\n  }\r\n  return change_coords;\r\n}\r\n","import { advance, CellCoords, WorldState } from \"./game_of_life\";\r\n\r\nfunction draw_world_state(\r\n  context: CanvasRenderingContext2D,\r\n  world_state: WorldState,\r\n  change_coords?: CellCoords[]\r\n) {\r\n  const cell_size = context.canvas.width / world_state.width;\r\n\r\n  if (change_coords !== undefined) {\r\n    for (const { x, y } of change_coords) {\r\n      let rect_offset;\r\n      let rect_size;\r\n      if (world_state.get(x, y)) {\r\n        rect_offset = 0;\r\n        rect_size = cell_size;\r\n      } else {\r\n        rect_offset = -1;\r\n        rect_size = cell_size + 2;\r\n      }\r\n      context.fillStyle = world_state.get(x, y) ? \"black\" : \"white\";\r\n      context.fillRect(\r\n        x * cell_size + rect_offset,\r\n        y * cell_size + rect_offset,\r\n        rect_size,\r\n        rect_size\r\n      );\r\n    }\r\n  } else {\r\n    context.fillStyle = \"white\";\r\n    context.fillRect(0, 0, context.canvas.width, context.canvas.height);\r\n\r\n    context.fillStyle = \"black\";\r\n    for (let x = 0; x < world_state.width; x += 1) {\r\n      for (let y = 0; y < world_state.height; y += 1) {\r\n        if (world_state.get(x, y)) {\r\n          context.fillRect(x * cell_size, y * cell_size, cell_size, cell_size);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction animate(\r\n  context: CanvasRenderingContext2D,\r\n  initial_state: WorldState,\r\n  fps: number\r\n) {\r\n  let current_state = initial_state;\r\n  let future_state = new WorldState(current_state.width, current_state.height);\r\n  draw_world_state(context, current_state);\r\n\r\n  let paused = false;\r\n\r\n  function draw_frame() {\r\n    const change_coords = advance(current_state, future_state);\r\n    draw_world_state(context, future_state, change_coords);\r\n\r\n    const buffer = current_state;\r\n    current_state = future_state;\r\n    future_state = buffer;\r\n\r\n    if (!paused) {\r\n      setTimeout(() => {\r\n        requestAnimationFrame(draw_frame);\r\n      }, 1000 / fps);\r\n    }\r\n  }\r\n\r\n  setTimeout(() => {\r\n    requestAnimationFrame(draw_frame);\r\n  }, 1000 / fps);\r\n\r\n  function toggle_pause() {\r\n    paused = !paused;\r\n    if (!paused) {\r\n      setTimeout(() => {\r\n        requestAnimationFrame(draw_frame);\r\n      }, 1000 / fps);\r\n    }\r\n  }\r\n  return toggle_pause;\r\n}\r\n\r\nfunction setup() {\r\n  const canvas = document.getElementById(\"demo-canvas\");\r\n  if (!(canvas instanceof HTMLCanvasElement)) {\r\n    throw new Error(`expected canvas element, found ${typeof canvas}`);\r\n  }\r\n\r\n  const context = canvas.getContext(\"2d\", { alpha: false });\r\n  if (context === null) {\r\n    throw new Error(\"cannot get rendering context\");\r\n  }\r\n\r\n  const initial_state = new WorldState(44, 44);\r\n  const pattern_offset_x = 4;\r\n  const pattern_offset_y = 6;\r\n  const glider_gun_pattern = [\r\n    \"........................O\",\r\n    \"......................O.O\",\r\n    \"............OO......OO............OO\",\r\n    \"...........O...O....OO............OO\",\r\n    \"OO........O.....O...OO\",\r\n    \"OO........O...O.OO....O.O\",\r\n    \"..........O.....O.......O\",\r\n    \"...........O...O\",\r\n    \"............OO\",\r\n  ];\r\n  for (let y = 0; y < glider_gun_pattern.length; y += 1) {\r\n    const row = glider_gun_pattern[y];\r\n    for (let x = 0; x < row.length; x += 1) {\r\n      if (row[x] !== \".\") {\r\n        initial_state.set(x + pattern_offset_x, y + pattern_offset_y, true);\r\n      }\r\n    }\r\n  }\r\n\r\n  const toggle_pause = animate(context, initial_state, 30);\r\n\r\n  document\r\n    .getElementById(\"demo-toggle-pause-button\")\r\n    ?.addEventListener(\"click\", toggle_pause);\r\n}\r\n\r\nwindow.addEventListener(\"DOMContentLoaded\", setup);\r\n"],"names":["$e3b144ce6cc43a85$export$69c0232701838d91","cell_index","x","y","this","width","get","height","cells","set","alive","constructor","Uint8Array","$3261096bd74b744f$var$draw_world_state","context","world_state","change_coords","cell_size","canvas","undefined","rect_offset","rect_size","fillStyle","fillRect","$3261096bd74b744f$var$animate","initial_state","fps","current_state","future_state","paused","draw_frame","Error","nr_living_neighbors","push","$e3b144ce6cc43a85$export$35d233f3b2dbf62a","buffer","setTimeout","requestAnimationFrame","window","addEventListener","ref","document","getElementById","HTMLCanvasElement","getContext","alpha","glider_gun_pattern","length","row","toggle_pause"],"version":3,"file":"index.2332d735.js.map"}