{"mappings":"AAAA,MAAMA,EAAgB,CACpB,IACA,KACA,IACA,IACA,KACA,IACA,KACA,IACA,IACA,KACA,IACA,MCGFC,OAAOC,iBAAiB,oBAbxB,WACE,MAAMC,EAAqBC,SAASC,eAAe,2BAC7CC,EAAgBF,SAASC,eAAe,sBAE9C,GAA2B,OAAvBF,GAAiD,OAAlBG,EACjC,MAAM,IAAIC,MAAM,yBDQbC,eACLC,EACAC,EACAC,GAGA,MAUMC,EAAU,IAAIC,aACdC,EAAoBF,EAAQG,WAAa,EACzCC,EACJF,EATmCG,mBAe/BC,EAAuB,MAC3B,IAAIC,EAAuB,GAC3B,KACEA,EAAuBH,GACvBG,GAAwB,OAExBA,GAAwB,EAE1B,OAAOA,GARoB,GAcvBC,EAAwC,EAAtBF,EAElBG,QAAeC,UAAUC,aAAaC,aAAa,CAAEC,OAAO,IAC5DC,EAAcd,EAAQe,wBAAwBN,GAC9CO,EAAgBhB,EAAQiB,iBAC9BD,EAAcE,QAAUV,EACxBM,EAAYK,QAAQH,GAGpB,MAAMI,EAAuBlB,EAAoBI,EAC3Ce,EAA0BC,KAAKC,MA1C1B,KA0CqCH,GAC1CI,EAA0BF,KAAKG,KAzC1B,KAyCoCL,GAEzCM,EAA4B,IAAIC,WAAWrB,GAC3CsB,EAAkC,GAClCC,EAAoD,GAgE1DC,uBA9DA,SAASC,IACPD,sBAAsBC,GAEtBf,EAAcgB,qBAAqBN,GAEnC,IAAIO,EAAgB,EAChBC,EAA0B,EAC9B,IAAK,IAAIC,EAAId,EAAyBc,EAAIX,EAAyBW,GAAK,EAClET,EAA0BS,GAAKF,IACjCA,EAAgBP,EAA0BS,GAC1CD,EAA0BC,GAI9B,GAAIF,EAAgBpC,EAClB,OAGF,MAAMN,GACH2C,EAA0B,IAAOd,EAE9BgB,EAAsBd,KAAKe,MACM,GAArCf,KAAKgB,KAAK/C,EAxEH,MA2EHgD,EAAqCH,EAAsB,EAE3DI,EACJ,EAAIlB,KAAKC,MAAMgB,EAAqC,IAQhD7C,EADiBN,EAJrBgD,EAAsB,GAAK,EACvB,GAAMA,EAAsB,GAC5BA,EAAsB,IAGWI,EAAgBC,WAEvD,GAAIb,EAAsBc,QAAU5C,EAAqB,CACvD,MAAM6C,EAAcf,EAAsBgB,OAAO,EAAG,GAAG,GACvDf,EAAqBc,IAAgB,EAGvCf,EAAsBiB,KAAKnD,GACrBA,KAAiBmC,IACrBA,EAAqBnC,GAAiB,GAExCmC,EAAqBnC,IAAkB,EAEvC,IAAIoD,EAAgB,GACpB,IAAK,MAAMC,KAAQlB,GAEG,KAAlBiB,GACAjB,EAAqBkB,GAAQlB,EAAqBiB,MAElDA,EAAgBC,GAGE,KAAlBD,GACF/C,EAASR,EAAoBuD,MCxHjCE,CAAmB,IAAK,IAAI,CAACC,EAAWF,KACtCxD,EAAmB2D,YAAc,GAAG5B,KAAKe,MAAMY,OAC/CvD,EAAcwD,YAAcH","sources":["projects/pitch-detection/pitch_detection.ts","projects/pitch-detection/demo.ts"],"sourcesContent":["const PITCH_CLASSES = [\r\n  \"A\",\r\n  \"A#\",\r\n  \"B\",\r\n  \"C\",\r\n  \"C#\",\r\n  \"D\",\r\n  \"D#\",\r\n  \"E\",\r\n  \"F\",\r\n  \"F#\",\r\n  \"G\",\r\n  \"G#\",\r\n] as const;\r\n\r\nexport async function detect_from_device(\r\n  threshold: number,\r\n  history_buffer_size: number,\r\n  callback: (frequency: number, note: string) => void\r\n) {\r\n  // We want to be able to distinguish between the closest two notes in our desired range.\r\n  const a4 = 440;\r\n  const c1 = 32.7;\r\n  const c1_sharp = 34.65;\r\n  const c7 = 2093;\r\n  const desired_frequency_resolution = c1_sharp - c1;\r\n\r\n  // Determine how many frequency bins we need to achieve the desired resolution between\r\n  // consecutive bins. The bins denote frequencies from 0 to 1/2 of the sample rate. [1].\r\n  //\r\n  // 1. https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/getByteFrequencyData\r\n  const context = new AudioContext();\r\n  const bin_max_frequency = context.sampleRate / 2;\r\n  const desired_frequency_bin_count =\r\n    bin_max_frequency / desired_frequency_resolution;\r\n\r\n  // Bin count must be a power of two, so find the nearest one that satisfies our requirement.\r\n  // Must be between 32 and 32768. [2]\r\n  //\r\n  // 2. https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/getByteFrequencyData\r\n  const frequency_bin_count = (() => {\r\n    let nearest_power_of_two = 32;\r\n    while (\r\n      nearest_power_of_two < desired_frequency_bin_count &&\r\n      nearest_power_of_two <= 32768\r\n    ) {\r\n      nearest_power_of_two *= 2;\r\n    }\r\n    return nearest_power_of_two;\r\n  })();\r\n\r\n  // The FFT window size is double the frequency bin count. [3]\r\n  //\r\n  // 3. https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/fftSize\r\n  const fft_window_size = frequency_bin_count * 2;\r\n\r\n  const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\r\n  const source_node = context.createMediaStreamSource(stream);\r\n  const analyser_node = context.createAnalyser();\r\n  analyser_node.fftSize = fft_window_size;\r\n  source_node.connect(analyser_node);\r\n\r\n  // Determine the range of bins we are interested in based on the detection frequency range.\r\n  const frequency_resolution = bin_max_frequency / frequency_bin_count;\r\n  const detection_bin_index_min = Math.floor(c1 / frequency_resolution);\r\n  const detection_bin_index_max = Math.ceil(c7 / frequency_resolution);\r\n\r\n  const frequency_bin_intensities = new Uint8Array(frequency_bin_count);\r\n  const detected_note_history: string[] = [];\r\n  const detected_note_counts: { [index: string]: number } = {};\r\n\r\n  function process_samples() {\r\n    requestAnimationFrame(process_samples);\r\n\r\n    analyser_node.getByteFrequencyData(frequency_bin_intensities);\r\n\r\n    let max_intensity = 0;\r\n    let max_intensity_bin_index = 0;\r\n    for (let i = detection_bin_index_min; i < detection_bin_index_max; i += 1) {\r\n      if (frequency_bin_intensities[i] > max_intensity) {\r\n        max_intensity = frequency_bin_intensities[i];\r\n        max_intensity_bin_index = i;\r\n      }\r\n    }\r\n\r\n    if (max_intensity < threshold) {\r\n      return;\r\n    }\r\n\r\n    const detected_frequency =\r\n      (max_intensity_bin_index + 0.5) * frequency_resolution;\r\n\r\n    const detected_note_index = Math.round(\r\n      Math.log2(detected_frequency / a4) * 12\r\n    );\r\n\r\n    const detected_note_index_relative_to_c4 = detected_note_index + 9;\r\n\r\n    const detected_octave =\r\n      4 + Math.floor(detected_note_index_relative_to_c4 / 12);\r\n\r\n    const detected_note_index_normalized =\r\n      detected_note_index % 12 < 0\r\n        ? 12 + (detected_note_index % 12)\r\n        : detected_note_index % 12;\r\n\r\n    const detected_pitch = PITCH_CLASSES[detected_note_index_normalized];\r\n    const detected_note = detected_pitch + detected_octave.toString();\r\n\r\n    if (detected_note_history.length >= history_buffer_size) {\r\n      const popped_note = detected_note_history.splice(0, 1)[0];\r\n      detected_note_counts[popped_note] -= 1;\r\n    }\r\n\r\n    detected_note_history.push(detected_note);\r\n    if (!(detected_note in detected_note_counts)) {\r\n      detected_note_counts[detected_note] = 0;\r\n    }\r\n    detected_note_counts[detected_note] += 1;\r\n\r\n    let dominant_note = \"\";\r\n    for (const note in detected_note_counts) {\r\n      if (\r\n        dominant_note === \"\" ||\r\n        detected_note_counts[note] > detected_note_counts[dominant_note]\r\n      ) {\r\n        dominant_note = note;\r\n      }\r\n    }\r\n    if (dominant_note !== \"\") {\r\n      callback(detected_frequency, dominant_note);\r\n    }\r\n  }\r\n  requestAnimationFrame(process_samples);\r\n}\r\n","import { detect_from_device } from \"./pitch_detection\";\r\n\r\nfunction setup() {\r\n  const detected_frequency = document.getElementById(\"demo-detected-frequency\");\r\n  const detected_note = document.getElementById(\"demo-detected-note\");\r\n\r\n  if (detected_frequency === null || detected_note === null) {\r\n    throw new Error(\"missing demo element\");\r\n  }\r\n\r\n  detect_from_device(125, 12, (frequency, note) => {\r\n    detected_frequency.textContent = `${Math.round(frequency)}Hz`;\r\n    detected_note.textContent = note;\r\n  });\r\n}\r\nwindow.addEventListener(\"DOMContentLoaded\", setup);\r\n"],"names":["$7cc6e5604d1f61f9$var$PITCH_CLASSES","window","addEventListener","detected_frequency","document","getElementById","detected_note","Error","async","threshold","history_buffer_size","callback","context","AudioContext","bin_max_frequency","sampleRate","desired_frequency_bin_count","c1_sharp","frequency_bin_count","nearest_power_of_two","fft_window_size","stream","navigator","mediaDevices","getUserMedia","audio","source_node","createMediaStreamSource","analyser_node","createAnalyser","fftSize","connect","frequency_resolution","detection_bin_index_min","Math","floor","detection_bin_index_max","ceil","frequency_bin_intensities","Uint8Array","detected_note_history","detected_note_counts","requestAnimationFrame","process_samples","getByteFrequencyData","max_intensity","max_intensity_bin_index","i","detected_note_index","round","log2","detected_note_index_relative_to_c4","detected_octave","toString","length","popped_note","splice","push","dominant_note","note","$7cc6e5604d1f61f9$export$482f5189a7f4c24c","frequency","textContent"],"version":3,"file":"index.d7f9c165.js.map"}