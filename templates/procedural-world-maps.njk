{% extends "project.njk" %}

{% block page_title %}Procedural World Maps{% endblock %}

{% block head %}
  {{ super() }}
  <link rel="stylesheet" href="/projects/procedural-world-maps/demo.scss">
{% endblock %}

{% block project_contents %}
  <div class="demo">
    {% for i in range(1, 10) %}
      <a href="/projects/procedural-world-maps/world-{{ i }}.png?as=jpeg" aria-label="View larger image">
        <picture>
          <source srcset="/projects/procedural-world-maps/world-{{ i }}.png?as=webp&width=170 1x, /projects/procedural-world-maps/world-{{ i }}.png?as=webp 2x" type="image/webp">

          <source srcset="/projects/procedural-world-maps/world-{{ i }}.png?as=jpeg&width=170 1x, /projects/procedural-world-maps/world-{{ i }}.png?as=jpeg 2x" type="image/png">

          <img
            src="/projects/procedural-world-maps/world-{{ i }}.png?as=jpeg&width=170"
            alt="Randomly generated world map #{{ i }}"
            width="170"
            height="170">
        </picture>
      </a>
    {% endfor %}
  </div>
  <p>
    Above are a few examples of procedurally generated worlds as viewed from above. The generation process is a pseudo random physically based one following these steps:
  </p>
  <ol>
    <li>
      Generate terrain elevation using layers of <a href="https://en.wikipedia.org/wiki/Simplex_noise">simplex</a> noise.
    </li>
    <li>
      Place oceans where elevation is less than zero.
    </li>
    <li>
      Compute local temperature based on elevation, latitude, and distance from the ocean.
    </li>
    <li>
      Place ice where temperature is suitable for snowfall or where the oceans may freeze.
    </li>
    <li>
      Compute local precipitation based on temperature and distance from the ocean.
    </li>
    <li>
      Fill up vallies to form lakes. Some lakes may be discarded if their depth is less than a given threshold. Separately, also save the dataset where no lakes were discarded, this "water level" dataset is relevant to the generation of rivers because for every point in it there exists a downhill path to the ocean.
    </li>
    <li>
      At each point, spawn a precipitation-based amount of water and track its downhill path to the ocean using the water level dataset from the previous step. For each point, keep track of the total amount of water passing through it from all streams, let's call that the river's "intensity". Points with an intensity greater than a given threshold are marked as rivers.
    </li>
    <li>
      Erode elevation next to rivers proportional to the river's intensity at that point. This results in rivers that start off narrow at the source and gradually widen.
    </li>
    <li>
      Finally, compute local biome based on temperature and precipitation.
    </li>
  </ol>
  <p>
    <a href="https://github.com/rharel/cuda-worldgen">Source code here.</a>
  </p>
</p>
{% endblock %}